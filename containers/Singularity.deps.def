Bootstrap: docker
From: rockylinux:8

%help
    Container providing the build environment and runtime dependencies for OpenImpala.
    # ... (rest of help section) ...

%labels
    Maintainer "James Le Houx <your-email@example.com>" # <-- UPDATE EMAIL
    Version 2.17-deps-gcc11-final-fixes # <-- Updated version

%post
    set -e # Ensure dnf commands exit on error early

    # Define versions used throughout the build
    export CMAKE_VERSION=3.28.3
    export OPENMPI_VERSION=4.1.6
    export HDF5_VERSION=1.12.3
    export AMREX_VERSION=23.11
    export HYPRE_VERSION=v2.30.0

    # Update and install base utilities & repositories
    dnf update -y
    dnf install -y dnf-utils
    dnf config-manager --set-enabled powertools
    dnf install -y epel-release
    dnf update -y

    # Install 'Development Tools' group, base GCC/GFortran (for bootstrap), GCC Toolset 11, AND other required packages
    dnf install -y \
        '@Development Tools' \
        gcc-gfortran \
        gcc-toolset-11 \
        wget git patch \
        python3 python3-pip \
        hostname \
        infiniband-diags libibverbs-devel \
        libtiff-devel boost-devel \
        hwloc-devel libevent-devel \
        flex bison flex-devel \
        which ca-certificates && \
    dnf clean all -y

    # Create a temporary directory for building dependencies
    mkdir /tmp/build_src
    cd /tmp/build_src

    # --- Enable GCC Toolset 11 and Build Dependencies inside this environment ---
    echo "=== Enabling GCC Toolset 11 for dependency builds ==="
    scl enable gcc-toolset-11 -- bash -c '
        set -e # Exit immediately if any command fails WITHIN THIS SUBSHELL

        # Re-export versions needed within this subshell
        export CMAKE_VERSION=3.28.3
        export OPENMPI_VERSION=4.1.6
        export HDF5_VERSION=1.12.3
        export AMREX_VERSION=23.11
        export HYPRE_VERSION=v2.30.0
        echo "--- Now using GCC $(gcc --version) ---"

        # --- Install CMake (Recent Version) ---
        echo "--- Installing CMake ---"
        export CMAKE_INSTALL_PREFIX=/opt/cmake/${CMAKE_VERSION}
        wget https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-x86_64.tar.gz
        mkdir -p ${CMAKE_INSTALL_PREFIX}
        tar -xzf cmake-${CMAKE_VERSION}-linux-x86_64.tar.gz --strip-components=1 -C ${CMAKE_INSTALL_PREFIX}
        echo "--- Verifying CMake installation ---"
        ls -l ${CMAKE_INSTALL_PREFIX}/bin/cmake # Check existence
        ${CMAKE_INSTALL_PREFIX}/bin/cmake --version # Check execution
        rm -f cmake-${CMAKE_VERSION}-linux-x86_64.tar.gz
        export PATH=${CMAKE_INSTALL_PREFIX}/bin:${PATH}
        echo "--- Verifying CMake via PATH ---"
        which cmake # Check if in path
        cmake --version # Check execution via path

        # --- Install OpenMPI (Recent Version) ---
        echo "--- Building OpenMPI ---"
        export OPENMPI_INSTALL_PREFIX=/usr/local
        wget https://download.open-mpi.org/release/open-mpi/v${OPENMPI_VERSION%.*}/openmpi-${OPENMPI_VERSION}.tar.gz --no-check-certificate
        tar -xzf openmpi-${OPENMPI_VERSION}.tar.gz
        cd openmpi-${OPENMPI_VERSION}
        export CC=$(which gcc)
        export CXX=$(which g++)
        export FC=$(which gfortran)
        echo "*** Using CC=$CC CXX=$CXX FC=$FC ***"
        ./configure \
            --prefix=${OPENMPI_INSTALL_PREFIX} \
            --enable-orterun-prefix-by-default \
            --enable-mpirun-prefix-by-default \
            --with-verbs \
            --enable-shared \
            --enable-static=no \
            CC="$CC" CXX="$CXX" FC="$FC"
        echo "*** Running make -j$(nproc) ***"
        make -j$(nproc) LDFLAGS="-lfl" # Build parallel
        echo "*** Running make install SERIAL NO LDFLAGS ***" # Corrected echo line
        make install # Install serial, NO LDFLAGS
        echo "*** Verifying mpicc existence immediately after install ***"
        ls -l /usr/local/bin/mpicc # Check existence
        cd ..
        rm -rf openmpi-${OPENMPI_VERSION}*
        ldconfig # Update library cache

        # --- Install HDF5 (with Parallel, Fortran, C++) ---
        echo "--- Building HDF5 ---"
        export HDF5_INSTALL_PREFIX=/opt/hdf5/${HDF5_VERSION}
        wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-${HDF5_VERSION%.*}/hdf5-${HDF5_VERSION}/src/hdf5-${HDF5_VERSION}.tar.gz --no-check-certificate
        tar -xzf hdf5-${HDF5_VERSION}.tar.gz
        cd hdf5-${HDF5_VERSION}
        echo "--- Using HDF5 CC=$CC CXX=$CXX FC=$FC ---"
        export CFLAGS="-O3 -march=native"
        export CXXFLAGS="${CFLAGS}"
        export FCFLAGS="${CFLAGS}"
        ./configure \
            --prefix=${HDF5_INSTALL_PREFIX} \
            --enable-parallel \
            --enable-fortran \
            --enable-fortran2003 \
            --enable-cxx \
            --enable-shared \
            --disable-static \
            --enable-unsupported
        echo "*** Running make -j$(nproc) for HDF5 ***"
        make -j$(nproc) # Build parallel
        echo "*** Running make install for HDF5 (SERIAL) ***"
        make install # Install serial
        cd ..
        rm -rf hdf5-${HDF5_VERSION}*

        # --- Install AMReX (Recent Stable Tag using CMake) ---
        echo "--- Building AMReX ---"
        export AMREX_INSTALL_PREFIX=/opt/amrex/${AMREX_VERSION}
        git clone --depth 1 --branch ${AMREX_VERSION} https://github.com/AMReX-Codes/amrex.git
        cd amrex
        mkdir build && cd build
        cmake .. \
            -DCMAKE_INSTALL_PREFIX=${AMREX_INSTALL_PREFIX} \
            -DCMAKE_BUILD_TYPE=Release \
            -DAMReX_MPI=ON \
            -DAMReX_OMP=ON \
            -DAMReX_EB=ON \
            -DCMAKE_CXX_FLAGS="-O3 -march=native" \
            -DCMAKE_C_FLAGS="-O3 -march=native" \
            -DCMAKE_Fortran_FLAGS="-O3 -march=native" \
            -DCMAKE_PREFIX_PATH="${HDF5_INSTALL_PREFIX}"
        echo "*** Running make -j$(nproc) for AMReX ***"
        make -j$(nproc) # Build parallel
        echo "*** Running make install for AMReX (SERIAL) ***"
        make install # Install serial
        cd ../..
        rm -rf amrex

        # --- Install HYPRE (Recent Stable Tag) ---
        echo "--- Building HYPRE ---"
        export HYPRE_INSTALL_PREFIX=/opt/hypre/${HYPRE_VERSION}
        git clone --depth 1 --branch ${HYPRE_VERSION} https://github.com/hypre-space/hypre.git
        cd hypre/src
        echo "--- Using HYPRE CC=$CC CXX=$CXX ---"
        ./configure \
            --prefix=${HYPRE_INSTALL_PREFIX} \
            --with-MPI \
            --enable-shared \
            CFLAGS="-O3 -march=native" \
            CXXFLAGS="-O3 -march=native"
        echo "*** Running make -j$(nproc) for HYPRE ***"
        make -j$(nproc) # Build parallel
        echo "*** Running make install for HYPRE (SERIAL) ***"
        make install # Install serial
        cd ../..
        rm -rf hypre

        echo "--- Dependency builds finished using GCC Toolset 11 ---"

    ' # End of bash -c '...' for scl enable

    echo "=== GCC Toolset 11 Section Finished ==="

    # --- Final Cleanup ---
    cd /
    rm -rf /tmp/build_src # Remove downloaded sources for dependencies
    dnf clean all

%environment
    # --- Activate GCC Toolset 11 by default ---
    # NOTE: This might still not work reliably in `exec` context, keep explicit sourcing in workflow for now.
    source /opt/rh/gcc-toolset-11/enable
    # ... (rest of environment section as before) ...
    export LC_ALL=C
    export LANG=C
    export CMAKE_VERSION=3.28.3
    export OPENMPI_VERSION=4.1.6
    export HDF5_VERSION=1.12.3
    export AMREX_VERSION=23.11
    export HYPRE_VERSION=v2.30.0
    export CMAKE_HOME=/opt/cmake/${CMAKE_VERSION}
    export HDF5_HOME=/opt/hdf5/${HDF5_VERSION}
    export AMREX_HOME=/opt/amrex/${AMREX_VERSION}
    export HYPRE_HOME=/opt/hypre/${HYPRE_VERSION}
    export H5CPP_HOME=${HDF5_HOME}
    export TIFF_HOME=/usr
    export PATH=${CMAKE_HOME}/bin:${HDF5_HOME}/bin:/usr/local/bin:${PATH}
    export LD_LIBRARY_PATH=${HDF5_HOME}/lib:${AMREX_HOME}/lib:${HYPRE_HOME}/lib:${TIFF_HOME}/lib64:/usr/local/lib:${LD_LIBRARY_PATH}
    export CMAKE_PREFIX_PATH=${HDF5_HOME}:${AMREX_HOME}:${HYPRE_HOME}:${TIFF_HOME}:/usr/local:${CMAKE_PREFIX_PATH}
    export OMPI_MCA_btl_vader_single_copy_mechanism=none
    export OMPI_MCA_rmaps_base_oversubscribe=1

%test
    set -e # Exit immediately if any command fails

    # --- Activate GCC Toolset 11 ---
    source /opt/rh/gcc-toolset-11/enable
    # -------------------------------

    echo "--- Verifying Tool Versions ---"
    echo "--- Contents of /usr/local/bin at start of %test ---"
    ls -l /usr/local/bin

    echo "Checking mpicc..."
    which mpicc
    mpicc --version

    echo "Checking mpic++..." # Check mpic++ too now
    which mpic++
    mpic++ --version

    echo "Checking cmake..."
    which cmake
    cmake --version

    echo "Checking gcc version..."
    which gcc
    gcc --version | grep "(GCC) 11." # grep exits non-zero if no match

    echo "--- Verifying Library Linking ---"
    # Use direct paths and check exit code of ldd explicitly
    echo "Checking HDF5 lib (/opt/hdf5/${HDF5_VERSION}/lib/libhdf5.so)..."
    ldd "/opt/hdf5/${HDF5_VERSION}/lib/libhdf5.so"

    echo "Checking AMReX lib (/opt/amrex/${AMREX_VERSION}/lib/libamrex.so)..."
    ldd "/opt/amrex/${AMREX_VERSION}/lib/libamrex.so"

    echo "Checking HYPRE lib (/opt/hypre/${HYPRE_VERSION}/lib/libHYPRE.so)..."
    ldd "/opt/hypre/${HYPRE_VERSION}/lib/libHYPRE.so"

    echo "Checking OpenMPI lib (/usr/local/lib/libmpi.so)..."
    ldd "/usr/local/lib/libmpi.so"

    echo "--- Basic dependency container tests passed. ---"
    # This line will only be reached if ALL previous commands succeeded

%runscript
    # ... (runscript section as before) ...
    echo "Container with build environment (GCC 11) and runtime dependencies for OpenImpala."
    echo "Does not contain OpenImpala itself. Intended for use with CI caching."
