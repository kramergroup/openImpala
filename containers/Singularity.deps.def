Bootstrap: docker
From: quay.io/rockylinux/rockylinux:8 # Using Quay.io

%help
    Container providing the build environment and runtime dependencies for OpenImpala.
    Installs CMake via RPM (cmake3 from EPEL).
    Installs Parallel HDF5 (linked with OpenMPI) via RPM from EPEL.
    Installs OpenMPI, libtiff, AMReX, HYPRE from source using GCC 11.

%labels
    Maintainer "James Le Houx <your-email@example.com>" # <-- UPDATE EMAIL
    Version 2.37-deps-gcc11-hdf5rpm-libtiff460 # <-- UPDATED Version

%post
    set -e # Ensure commands exit on error early

    # Define versions
    export OPENMPI_VERSION=4.1.6
    export AMREX_VERSION=23.11
    export HYPRE_VERSION=v2.30.0
    export HDF5_VERSION=1.12.3  # Choose a suitable HDF5 version
    export LIBTIFF_VERSION=4.6.0 # Build specific libtiff version
    export ZLIB_VERSION=system # Or specify if building zlib from source

    # --- Define Install Prefixes ---
    export OPENMPI_INSTALL_PREFIX=/usr/local
    export HDF5_INSTALL_PREFIX=/opt/hdf5/${HDF5_VERSION}
    export LIBTIFF_INSTALL_PREFIX=/opt/libtiff/${LIBTIFF_VERSION} # Custom libtiff prefix
    export AMREX_INSTALL_PREFIX=/opt/amrex/${AMREX_VERSION}
    export HYPRE_INSTALL_PREFIX=/opt/hypre/${HYPRE_VERSION}
    export ZLIB_ROOT=/usr # Assuming using system zlib

    # Add ldconfig paths early if needed
    echo "/usr/local/lib" > /etc/ld.so.conf.d/usrlocal.conf
    echo "${HDF5_INSTALL_PREFIX}/lib" > /etc/ld.so.conf.d/hdf5.conf
    echo "${LIBTIFF_INSTALL_PREFIX}/lib" > /etc/ld.so.conf.d/custom-libtiff.conf # Add custom libtiff path

    # --- Install Repositories and Packages ---
    echo "--- Updating system and installing EPEL ---"
    dnf update -y
    dnf install -y dnf-utils epel-release

    echo "--- Enabling PowerTools repository ---"
    dnf config-manager --set-enabled powertools

    echo "--- Installing Development Tools and Core Packages ---"
    # libtiff-devel REMOVED, libjpeg-turbo-devel ADDED
    dnf install -y \
        '@Development Tools' \
        gcc-gfortran \
        gcc-toolset-11 \
        cmake3 \
        wget \
        git \
        patch \
        python3 \
        python3-pip \
        hostname \
        infiniband-diags \
        libibverbs-devel \
        libjpeg-turbo-devel \
        boost-devel \
        hwloc-devel \
        libevent-devel \
        flex \
        bison \
        flex-devel \
        which \
        ca-certificates \
        zlib-devel && \
    dnf clean all -y

    # --- Verification Step (Your existing check) ---
    echo "--- Verifying wget installation post dnf ---"
    which wget || { echo "!!! ERROR: wget command not found right after dnf install!"; exit 1; }
    echo "--- wget found, continuing build ---"

    mkdir /tmp/build_src && cd /tmp/build_src

    # --- Activate SCL ---
    echo "=== Sourcing GCC Toolset 11 enable script ==="
    source /opt/rh/gcc-toolset-11/enable
    export CC=$(which gcc); export CXX=$(which g++); export FC=$(which gfortran)

    # --- Verify CMake (from dnf) ---
    echo "--- Verifying CMake (from dnf) ---"
    which cmake && cmake --version || { echo "CMake (from dnf) verification failed!"; exit 1; }
    # --- Verify GCC ---
    which gcc && gcc --version | grep "(GCC) 11." || { echo "GCC 11 verification failed!"; exit 1; }

    # --- Install OpenMPI ---
    echo "--- Building OpenMPI ---"
    wget https://download.open-mpi.org/release/open-mpi/v${OPENMPI_VERSION%.*}/openmpi-${OPENMPI_VERSION}.tar.gz --no-check-certificate
    tar -xzf openmpi-${OPENMPI_VERSION}.tar.gz && cd openmpi-${OPENMPI_VERSION}
    ./configure --prefix=${OPENMPI_INSTALL_PREFIX} \
        --enable-orterun-prefix-by-default --enable-mpirun-prefix-by-default \
        --with-verbs --enable-shared --enable-static=no \
        CC="$CC" CXX="$CXX" FC="$FC"
    make -j$(nproc) LDFLAGS="-lfl"
    make install # Serial, No LDFLAGS
    cd .. && rm -rf openmpi-${OPENMPI_VERSION}*
    # --- Update PATH and ldconfig AFTER OpenMPI install ---
    export PATH=${OPENMPI_INSTALL_PREFIX}/bin:${PATH} # Prepend MPI bins
    ldconfig # Update linker cache for OpenMPI
    echo "--- Verifying OpenMPI install (mpicc) ---"
    which mpicc && mpicc --version || { echo "*** ERROR: mpicc not found after OpenMPI install!"; exit 1; }
    ldconfig -p | grep libmpi || echo "WARNING: libmpi not found in ldconfig cache"

    # --- Install HDF5 from Source (Parallel Version) ---
    echo "--- Building HDF5 ${HDF5_VERSION} from Source ---"
    # Using --no-check-certificate as wget sometimes has issues with HDFGroup certs in containers
    wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-${HDF5_VERSION%.*}/hdf5-${HDF5_VERSION}/src/hdf5-${HDF5_VERSION}.tar.gz --no-check-certificate
    tar -xzf hdf5-${HDF5_VERSION}.tar.gz && cd hdf5-${HDF5_VERSION}
    CC=mpicc CXX=mpicxx FC=mpifort ./configure \
        --prefix=${HDF5_INSTALL_PREFIX} \
        --enable-parallel \
        --enable-shared \
        --enable-hl \
        --enable-cxx \
        --enable-unsupported \
        --with-zlib=${ZLIB_ROOT} \
        --enable-threadsafe
    make -j$(nproc)
    make install # Serial install
    cd .. && rm -rf hdf5-${HDF5_VERSION}*
    # --- Update PATH and ldconfig AFTER HDF5 install ---
    export PATH=${HDF5_INSTALL_PREFIX}/bin:${PATH} # Prepend HDF5 bins
    ldconfig # Update linker cache for HDF5
    echo "--- Verifying HDF5 install (h5pcc) ---"
    which h5pcc && h5pcc -showconfig || { echo "*** ERROR: h5pcc not found or failed after HDF5 source install!"; exit 1; }
    ldconfig -p | grep libhdf5 || echo "WARNING: libhdf5 not found in ldconfig cache"

    # <<< NEW SECTION: Install libtiff from Source >>>
    echo "--- Building libtiff ${LIBTIFF_VERSION} from Source ---"
    cd /tmp/build_src
    # Using --no-check-certificate as wget sometimes has issues with OSGeo certs in containers
    wget https://download.osgeo.org/libtiff/tiff-${LIBTIFF_VERSION}.tar.gz --no-check-certificate
    tar -xzf tiff-${LIBTIFF_VERSION}.tar.gz
    cd tiff-${LIBTIFF_VERSION}
    # Configure libtiff - using default options which usually include tools and common codecs
    # Point to system zlib and jpeg if installed (ensure zlib-devel, libjpeg-turbo-devel are installed above)
    ./configure --prefix=${LIBTIFF_INSTALL_PREFIX} --with-zlib=yes --with-jpeg=yes
    make -j$(nproc)
    make install
    cd ..
    rm -rf tiff-${LIBTIFF_VERSION}*
    # --- Run ldconfig AFTER libtiff install ---
    ldconfig # Update linker cache NOW including the custom libtiff

    # <<< END NEW SECTION >>>

    # --- Install AMReX ---
    echo "--- Building AMReX ${AMREX_VERSION} ---"
    cd /tmp/build_src # Make sure we are in the right place
    git clone --depth 1 --branch ${AMREX_VERSION} https://github.com/AMReX-Codes/amrex.git
    cd amrex
    mkdir build && cd build
    echo "--- Configuring AMReX ---"
    # CMAKE_PREFIX_PATH needs to include custom HDF5 and libtiff paths now
    cmake .. \
        -DCMAKE_INSTALL_PREFIX=${AMREX_INSTALL_PREFIX} \
        -DCMAKE_BUILD_TYPE=Release \
        -DAMReX_MPI=ON \
        -DAMReX_OMP=ON \
        -DAMReX_EB=ON \
        -DAMReX_FORTRAN=ON \
        -DCMAKE_C_COMPILER=$(which mpicc) \
        -DCMAKE_CXX_COMPILER=$(which mpicxx) \
        -DCMAKE_Fortran_COMPILER=$(which mpif90) \
        -DBUILD_SHARED_LIBS=ON \
        -DCMAKE_CXX_FLAGS="-O3 -march=native" \
        -DCMAKE_C_FLAGS="-O3 -march=native" \
        -DCMAKE_Fortran_FLAGS="-O3 -march=native" \
        -DCMAKE_PREFIX_PATH="${HDF5_INSTALL_PREFIX};${LIBTIFF_INSTALL_PREFIX}" \
    || { echo "*** AMReX Configure Failed!"; exit 1; }
    echo "--- Building AMReX (make) ---"
    make -j$(nproc) || { echo "*** AMReX Make Failed!"; exit 1; }
    echo "--- Installing AMReX (make install) ---"
    make install || { echo "*** AMReX Make Install Failed!"; exit 1; }
    echo "--- Finished checking AMReX installation ---"
    cd ../..
    echo "--- Cleaning up AMReX source ---"
    rm -rf amrex

    # --- Install HYPRE ---
    echo "--- Building HYPRE ---"
    cd /tmp/build_src # Make sure we are in the right place
    git clone --depth 1 --branch ${HYPRE_VERSION} https://github.com/hypre-space/hypre.git
    cd hypre/src
    # *** MODIFIED LINE: Added --enable-struct ***
    ./configure --prefix=${HYPRE_INSTALL_PREFIX} \
        --with-MPI \
        --enable-shared \
        --enable-struct \
        CFLAGS="-O3 -march=native" CXXFLAGS="-O3 -march=native"

    # Check HYPRE configure results
    echo "--- Checking HYPRE Configuration ---"
    if [ -f "config.log" ]; then
        echo "Features enabled (from config.log grep):"
        # Grep for Struct, SStruct, IJ interfaces - adjust patterns as needed for hypre config.log format
        echo "STRUCT:"
        grep -i "checking for.*struct.*yes" config.log || echo "  Struct check not found or failed."
        echo "SSTRUCT:"
        grep -i "checking for.*sstruct.*yes" config.log || echo "  SStruct check not found or failed."
        echo "IJ:"
        grep -i "checking for.*ij.*yes" config.log || echo "  IJ check not found or failed."
    else
        echo "WARNING: config.log not found after HYPRE configure."
    fi
    echo "----------------------------------"

    make -j$(nproc) && make install # Serial install
    cd ../.. && rm -rf hypre

    echo "--- Dependency builds finished using GCC Toolset 11 ---"

    # --- Final Cleanup ---
    echo "=== Final PATH: $PATH ==="
    cd / && rm -rf /tmp/build_src
    dnf clean all

    echo "--- %post section completed successfully ---"

%environment
    # Define environment referencing the FINAL locations
    source /opt/rh/gcc-toolset-11/enable
    export LC_ALL=C; export LANG=C

    # Define versions (match versions used in %post)
    export OPENMPI_VERSION=4.1.6
    export AMREX_VERSION=23.11
    export HYPRE_VERSION=v2.30.0
    export HDF5_VERSION=1.12.3
    export LIBTIFF_VERSION=4.6.0 # Custom libtiff version

    # Define Install Prefixes
    export AMREX_INSTALL_PREFIX=/opt/amrex/${AMREX_VERSION}
    export HYPRE_INSTALL_PREFIX=/opt/hypre/${HYPRE_VERSION}
    export OPENMPI_INSTALL_PREFIX=/usr/local
    export HDF5_INSTALL_PREFIX=/opt/hdf5/${HDF5_VERSION}
    export LIBTIFF_INSTALL_PREFIX=/opt/libtiff/${LIBTIFF_VERSION} # Custom libtiff path

    # Define HOME vars (Using custom libtiff prefix for TIFF_HOME)
    export AMREX_HOME=${AMREX_INSTALL_PREFIX}
    export HYPRE_HOME=${HYPRE_INSTALL_PREFIX}
    export HDF5_HOME=${HDF5_INSTALL_PREFIX}
    export H5CPP_HOME=${HDF5_HOME}
    export TIFF_HOME=${LIBTIFF_INSTALL_PREFIX} # Use custom libtiff path

    # PATH: Prepend installed bins (including custom libtiff)
    export PATH=${LIBTIFF_INSTALL_PREFIX}/bin:${AMREX_HOME}/bin:${HYPRE_HOME}/bin:${HDF5_HOME}/bin:${OPENMPI_INSTALL_PREFIX}/bin:${PATH}

    # LD_LIBRARY_PATH: Prepend installed libs (including custom libtiff)
    # Assuming custom libtiff installs to ${LIBTIFF_INSTALL_PREFIX}/lib
    export LD_LIBRARY_PATH=${LIBTIFF_INSTALL_PREFIX}/lib:${AMREX_HOME}/lib:${HYPRE_HOME}/lib:${HDF5_HOME}/lib:${OPENMPI_INSTALL_PREFIX}/lib:${LD_LIBRARY_PATH}

    # CMAKE_PREFIX_PATH: Point to install locations (including custom libtiff)
    export CMAKE_PREFIX_PATH=${LIBTIFF_INSTALL_PREFIX}:${AMREX_HOME}:${HYPRE_HOME}:${HDF5_HOME}:${OPENMPI_INSTALL_PREFIX}:${CMAKE_PREFIX_PATH}

    export OMPI_MCA_btl_vader_single_copy_mechanism=none; export OMPI_MCA_rmaps_base_oversubscribe=1

%test
    set -e
    source /opt/rh/gcc-toolset-11/enable
    # Source the runtime environment defined in %environment for tests

    # Define prefixes needed for tests (Match %environment)
    export HDF5_VERSION=1.12.3
    export HDF5_INSTALL_PREFIX=/opt/hdf5/${HDF5_VERSION}
    export AMREX_VERSION=23.11
    export AMREX_INSTALL_PREFIX=/opt/amrex/${AMREX_VERSION}
    export HYPRE_VERSION=v2.30.0
    export HYPRE_INSTALL_PREFIX=/opt/hypre/${HYPRE_VERSION}
    export OPENMPI_INSTALL_PREFIX=/usr/local
    export LIBTIFF_VERSION=4.6.0
    export LIBTIFF_INSTALL_PREFIX=/opt/libtiff/${LIBTIFF_VERSION}

    echo "--- Verifying Tool Versions ---";
    echo "Checking mpicc..."; which mpicc; mpicc --version
    echo "Checking mpic++..."; which mpic++; mpic++ --version
    echo "Checking cmake..."; which cmake; cmake --version
    echo "Checking h5pcc..."; which h5pcc; ${HDF5_INSTALL_PREFIX}/bin/h5pcc -showconfig
    echo "Checking gcc version..."; which gcc; gcc --version | grep "(GCC) 11."
    # Add check for custom tiffinfo version
    # --- Check custom tiffinfo version ---
    echo "Checking tiffinfo version..."
    # Run tiffinfo (it errors on --version but prints version string to stdout after stderr)
    # Redirect stderr to stdout (2>&1), pipe to grep -q (quiet), check grep's exit status
    if ${LIBTIFF_INSTALL_PREFIX}/bin/tiffinfo --version 2>&1 | grep -q "LIBTIFF, Version ${LIBTIFF_VERSION}"; then
        echo "  tiffinfo version ${LIBTIFF_VERSION} confirmed."
    else
        echo "*** ERROR: Could not confirm tiffinfo version ${LIBTIFF_VERSION} in output!"
        # Optional: show output for debugging
        # ${LIBTIFF_INSTALL_PREFIX}/bin/tiffinfo --version || true
        exit 1
    fi

    echo "--- Verifying Library Linking ---"
    # Check custom libtiff library
    LIBTIFF_LIB="${LIBTIFF_INSTALL_PREFIX}/lib/libtiff.so"
    if [ ! -f "$LIBTIFF_LIB" ]; then echo "*** ERROR: Custom libtiff library not found at $LIBTIFF_LIB!"; exit 1; fi
    echo "Checking libtiff lib ($LIBTIFF_LIB)..."; ldd "$LIBTIFF_LIB"

    # Check other libraries
    echo "Checking HDF5 lib (${HDF5_INSTALL_PREFIX}/lib/libhdf5.so)..."; ldd "${HDF5_INSTALL_PREFIX}/lib/libhdf5.so"
    echo "Checking AMReX lib (${AMREX_INSTALL_PREFIX}/lib/libamrex.so)..."; ldd "${AMREX_INSTALL_PREFIX}/lib/libamrex.so"
    echo "Checking HYPRE lib (${HYPRE_INSTALL_PREFIX}/lib/libHYPRE.so)..."; ldd "${HYPRE_INSTALL_PREFIX}/lib/libHYPRE.so"
    echo "Checking OpenMPI lib (${OPENMPI_INSTALL_PREFIX}/lib/libmpi.so)..."; ldd "${OPENMPI_INSTALL_PREFIX}/lib/libmpi.so"

    echo "--- Basic dependency container tests passed. ---"

%runscript
    echo "Container with build environment (GCC 11) and runtime dependencies for OpenImpala."
    echo "Includes custom build of libtiff ${LIBTIFF_VERSION}."
    echo "Does not contain OpenImpala itself. Intended for use with CI caching."
