Bootstrap: docker
From: quay.io/rockylinux/rockylinux:8 # Using Quay.io

%help
    Container providing the build environment and runtime dependencies for OpenImpala.
    Installs CMake via RPM (cmake3 from EPEL).
    Installs Parallel HDF5 (linked with OpenMPI) via RPM from EPEL.
    Installs OpenMPI, libtiff, AMReX, HYPRE from source using GCC 11.

%labels
    Maintainer "James Le Houx <your-email@example.com>" # <-- UPDATE EMAIL
    Version 2.37-deps-amrex2503-hypre2320-test # <-- UPDATED Version Label

%post
    set -e # Ensure commands exit on error early

    # Define versions
    export OPENMPI_VERSION=4.1.6
    export AMREX_VERSION=25.03     # AMReX version
    export HYPRE_VERSION=v2.32.0   # HYPRE version
    export HDF5_VERSION=1.12.3
    export LIBTIFF_VERSION=4.6.0
    export ZLIB_VERSION=system

    # --- Define Install Prefixes ---
    export OPENMPI_INSTALL_PREFIX=/usr/local
    export HDF5_INSTALL_PREFIX=/opt/hdf5/${HDF5_VERSION}
    export LIBTIFF_INSTALL_PREFIX=/opt/libtiff/${LIBTIFF_VERSION}
    export AMREX_INSTALL_PREFIX=/opt/amrex/${AMREX_VERSION}
    export HYPRE_INSTALL_PREFIX=/opt/hypre/${HYPRE_VERSION}
    export ZLIB_ROOT=/usr

    # Add ldconfig paths early if needed
    echo "/usr/local/lib" > /etc/ld.so.conf.d/usrlocal.conf
    echo "${HDF5_INSTALL_PREFIX}/lib" > /etc/ld.so.conf.d/hdf5.conf
    echo "${LIBTIFF_INSTALL_PREFIX}/lib" > /etc/ld.so.conf.d/custom-libtiff.conf
    echo "${AMREX_INSTALL_PREFIX}/lib" > /etc/ld.so.conf.d/amrex.conf
    echo "${HYPRE_INSTALL_PREFIX}/lib" > /etc/ld.so.conf.d/hypre.conf

    # --- Install Repositories and Packages ---
    echo "--- Updating system and installing EPEL ---"
    dnf update -y
    dnf install -y dnf-utils epel-release

    echo "--- Enabling PowerTools repository ---"
    dnf config-manager --set-enabled powertools

    echo "--- Installing Development Tools and Core Packages ---"
    dnf install -y \
        '@Development Tools' \
        gcc-gfortran \
        gcc-toolset-11 \
        cmake3 \
        wget \
        git \
        patch \
        python3 \
        python3-pip \
        hostname \
        infiniband-diags \
        libibverbs-devel \
        libjpeg-turbo-devel \
        boost-devel \
        hwloc-devel \
        libevent-devel \
        flex \
        bison \
        flex-devel \
        which \
        ca-certificates \
        zlib-devel && \
    dnf clean all -y

    # --- Verification Step ---
    echo "--- Verifying wget installation post dnf ---"
    which wget || { echo "!!! ERROR: wget command not found right after dnf install!"; exit 1; }
    echo "--- wget found, continuing build ---"

    mkdir /tmp/build_src && cd /tmp/build_src

    # --- Activate SCL ---
    echo "=== Sourcing GCC Toolset 11 enable script ==="
    source /opt/rh/gcc-toolset-11/enable
    export CC=$(which gcc); export CXX=$(which g++); export FC=$(which gfortran)

    # --- Verify Compilers ---
    echo "--- Verifying CMake (from dnf) ---"
    which cmake && cmake --version || { echo "CMake (from dnf) verification failed!"; exit 1; }
    which gcc && gcc --version | grep "(GCC) 11." || { echo "GCC 11 verification failed!"; exit 1; }

    # --- Install OpenMPI ---
    echo "--- Building OpenMPI ---"
    wget https://download.open-mpi.org/release/open-mpi/v${OPENMPI_VERSION%.*}/openmpi-${OPENMPI_VERSION}.tar.gz --no-check-certificate
    tar -xzf openmpi-${OPENMPI_VERSION}.tar.gz && cd openmpi-${OPENMPI_VERSION}
    ./configure --prefix=${OPENMPI_INSTALL_PREFIX} \
        --enable-orterun-prefix-by-default --enable-mpirun-prefix-by-default \
        --with-verbs --enable-shared --enable-static=no \
        CC="$CC" CXX="$CXX" FC="$FC"
    make -j$(nproc) LDFLAGS="-lfl"
    make install # Serial, No LDFLAGS
    cd .. && rm -rf openmpi-${OPENMPI_VERSION}*
    export PATH=${OPENMPI_INSTALL_PREFIX}/bin:${PATH} # Prepend MPI bins
    ldconfig # Update linker cache for OpenMPI
    echo "--- Verifying OpenMPI install (mpicc) ---"
    which mpicc && mpicc --version || { echo "*** ERROR: mpicc not found after OpenMPI install!"; exit 1; }
    ldconfig -p | grep libmpi || echo "WARNING: libmpi not found in ldconfig cache"


    # --- Install HDF5 from Source ---
    echo "--- Building HDF5 ${HDF5_VERSION} from Source ---"
    wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-${HDF5_VERSION%.*}/hdf5-${HDF5_VERSION}/src/hdf5-${HDF5_VERSION}.tar.gz --no-check-certificate
    tar -xzf hdf5-${HDF5_VERSION}.tar.gz && cd hdf5-${HDF5_VERSION}
    CC=mpicc CXX=mpicxx FC=mpifort ./configure \
        --prefix=${HDF5_INSTALL_PREFIX} \
        --enable-parallel \
        --enable-shared \
        --enable-hl \
        --enable-cxx \
        --enable-unsupported \
        --with-zlib=${ZLIB_ROOT} \
        --enable-threadsafe
    make -j$(nproc)
    make install # Serial install
    cd .. && rm -rf hdf5-${HDF5_VERSION}*
    export PATH=${HDF5_INSTALL_PREFIX}/bin:${PATH} # Prepend HDF5 bins
    ldconfig # Update linker cache for HDF5
    echo "--- Verifying HDF5 install (h5pcc) ---"
    which h5pcc && h5pcc -showconfig || { echo "*** ERROR: h5pcc not found or failed after HDF5 source install!"; exit 1; }
    ldconfig -p | grep libhdf5 || echo "WARNING: libhdf5 not found in ldconfig cache"


    # --- Install libtiff from Source ---
    echo "--- Building libtiff ${LIBTIFF_VERSION} from Source ---"
    cd /tmp/build_src
    wget https://download.osgeo.org/libtiff/tiff-${LIBTIFF_VERSION}.tar.gz --no-check-certificate
    tar -xzf tiff-${LIBTIFF_VERSION}.tar.gz
    cd tiff-${LIBTIFF_VERSION}
    ./configure --prefix=${LIBTIFF_INSTALL_PREFIX} --with-zlib=yes --with-jpeg=yes
    make -j$(nproc)
    make install
    cd ..
    rm -rf tiff-${LIBTIFF_VERSION}*
    ldconfig # Update linker cache NOW including the custom libtiff


    # --- Install AMReX ---
    echo "--- Building AMReX ${AMREX_VERSION} ---"
    cd /tmp/build_src
    git clone --depth 1 --branch ${AMREX_VERSION} https://github.com/AMReX-Codes/amrex.git
    cd amrex
    mkdir build && cd build
    echo "--- Configuring AMReX ---"
    cmake .. \
        -DCMAKE_INSTALL_PREFIX=${AMREX_INSTALL_PREFIX} \
        -DCMAKE_BUILD_TYPE=Release \
        -DAMReX_MPI=ON \
        -DAMReX_OMP=ON \
        -DAMReX_EB=ON \
        -DAMReX_FORTRAN=ON \
        -DCMAKE_C_COMPILER=$(which mpicc) \
        -DCMAKE_CXX_COMPILER=$(which mpicxx) \
        -DCMAKE_Fortran_COMPILER=$(which mpif90) \
        -DBUILD_SHARED_LIBS=ON \
        -DCMAKE_CXX_FLAGS="-O3 -march=native" \
        -DCMAKE_C_FLAGS="-O3 -march=native" \
        -DCMAKE_Fortran_FLAGS="-O3 -march=native" \
        -DCMAKE_PREFIX_PATH="${HDF5_INSTALL_PREFIX};${LIBTIFF_INSTALL_PREFIX}" \
    || { echo "*** AMReX Configure Failed!"; exit 1; }
    echo "--- Building AMReX (make) ---"
    make -j$(nproc) || { echo "*** AMReX Make Failed!"; exit 1; }
    echo "--- Installing AMReX (make install) ---"
    make install || { echo "*** AMReX Make Install Failed!"; exit 1; }
    echo "--- Finished checking AMReX installation ---"
    cd ../..
    echo "--- Cleaning up AMReX source ---"
    rm -rf amrex


    # --- Install HYPRE ---
    echo "--- Building HYPRE ${HYPRE_VERSION} ---"
    cd /tmp/build_src
    git clone --depth 1 --branch ${HYPRE_VERSION} https://github.com/hypre-space/hypre.git
    cd hypre/src
    # Configure using default flags (Struct should be enabled by default)
    ./configure --prefix=${HYPRE_INSTALL_PREFIX} \
        --with-MPI \
        --enable-shared \
        CFLAGS="-O3 -march=native" CXXFLAGS="-O3 -march=native"

    echo "--- Making HYPRE library ---"
    make -j$(nproc)

    # *** ADDED: Run HYPRE's internal tests ***
    echo "--- Running HYPRE internal tests (make test) ---"
    # Run tests before install to use build dir paths. Capture output.
    # Allow errors for now, just capture output. Add '|| true' if failure should not stop SIF build.
    make test > /tmp/hypre_make_test.log 2>&1 || echo "WARNING: 'make test' in HYPRE failed. See hypre_make_test.log."
    echo "--- Finished running HYPRE internal tests ---"
    # *** END ADDED STEP ***

    echo "--- Installing HYPRE ---"
    make install # Serial install

    cd ../.. # Go back to /tmp/build_src
    # Copy the test log out before removing the source dir
    if [ -f "hypre/src/hypre_make_test.log" ]; then
        cp hypre/src/hypre_make_test.log /hypre_make_test.log
        echo "Copied hypre_make_test.log to /"
    else
        # If make test failed very early, the log might be in the top hypre dir
         if [ -f "hypre/hypre_make_test.log" ]; then
             cp hypre/hypre_make_test.log /hypre_make_test.log
             echo "Copied hypre_make_test.log from hypre/ to /"
         else
             echo "WARNING: Could not find hypre_make_test.log in hypre/src/ or hypre/"
         fi
    fi
    rm -rf hypre # Clean up source

    ldconfig # Ensure new HYPRE libs are found by linker

    echo "--- Dependency builds finished using GCC Toolset 11 ---"

    # --- Final Cleanup ---
    echo "=== Final PATH: $PATH ==="
    cd / && rm -rf /tmp/build_src
    dnf clean all

    echo "--- %post section completed successfully ---"

%environment
    # Define environment referencing the FINAL locations
    source /opt/rh/gcc-toolset-11/enable
    export LC_ALL=C; export LANG=C

    # Define versions (match versions used in %post)
    export OPENMPI_VERSION=4.1.6
    export AMREX_VERSION=25.03     # AMReX version
    export HYPRE_VERSION=v2.32.0   # HYPRE version
    export HDF5_VERSION=1.12.3
    export LIBTIFF_VERSION=4.6.0

    # Define Install Prefixes
    export AMREX_INSTALL_PREFIX=/opt/amrex/${AMREX_VERSION}
    export HYPRE_INSTALL_PREFIX=/opt/hypre/${HYPRE_VERSION}
    export OPENMPI_INSTALL_PREFIX=/usr/local
    export HDF5_INSTALL_PREFIX=/opt/hdf5/${HDF5_VERSION}
    export LIBTIFF_INSTALL_PREFIX=/opt/libtiff/${LIBTIFF_VERSION}

    # Define HOME vars
    export AMREX_HOME=${AMREX_INSTALL_PREFIX}
    export HYPRE_HOME=${HYPRE_INSTALL_PREFIX}
    export HDF5_HOME=${HDF5_INSTALL_PREFIX}
    export H5CPP_HOME=${HDF5_HOME}
    export TIFF_HOME=${LIBTIFF_INSTALL_PREFIX}

    # PATH: Prepend installed bins
    export PATH=${AMREX_HOME}/bin:${HYPRE_HOME}/bin:${LIBTIFF_INSTALL_PREFIX}/bin:${HDF5_HOME}/bin:${OPENMPI_INSTALL_PREFIX}/bin:${PATH}

    # LD_LIBRARY_PATH: Prepend installed libs
    export LD_LIBRARY_PATH=${AMREX_HOME}/lib:${HYPRE_HOME}/lib:${LIBTIFF_INSTALL_PREFIX}/lib:${HDF5_HOME}/lib:${OPENMPI_INSTALL_PREFIX}/lib:${LD_LIBRARY_PATH}

    # CMAKE_PREFIX_PATH
    export CMAKE_PREFIX_PATH=${AMREX_HOME}:${HYPRE_HOME}:${LIBTIFF_INSTALL_PREFIX}:${HDF5_HOME}:${OPENMPI_INSTALL_PREFIX}:${CMAKE_PREFIX_PATH}

    export OMPI_MCA_btl_vader_single_copy_mechanism=none; export OMPI_MCA_rmaps_base_oversubscribe=1

%test
    # Test section remains mostly the same, but will use updated libraries
    set -e
    source /opt/rh/gcc-toolset-11/enable
    # Source the runtime environment defined in %environment for tests

    # Define prefixes needed for tests (Match %environment)
    export HDF5_VERSION=1.12.3
    export HDF5_INSTALL_PREFIX=/opt/hdf5/${HDF5_VERSION}
    export AMREX_VERSION=25.03     # Updated for verification
    export AMREX_INSTALL_PREFIX=/opt/amrex/${AMREX_VERSION}
    export HYPRE_VERSION=v2.32.0   # Updated for verification
    export HYPRE_INSTALL_PREFIX=/opt/hypre/${HYPRE_VERSION}
    export OPENMPI_INSTALL_PREFIX=/usr/local
    export LIBTIFF_VERSION=4.6.0
    export LIBTIFF_INSTALL_PREFIX=/opt/libtiff/${LIBTIFF_VERSION}

    echo "--- Verifying Tool Versions ---";
    echo "Checking mpicc..."; which mpicc; mpicc --version
    echo "Checking mpic++..."; which mpic++; mpic++ --version
    echo "Checking cmake..."; which cmake; cmake --version
    echo "Checking h5pcc..."; which h5pcc; ${HDF5_INSTALL_PREFIX}/bin/h5pcc -showconfig
    echo "Checking gcc version..."; which gcc; gcc --version | grep "(GCC) 11."
    echo "Checking tiffinfo version..."
    if ${LIBTIFF_INSTALL_PREFIX}/bin/tiffinfo --version 2>&1 | grep -q "LIBTIFF, Version ${LIBTIFF_VERSION}"; then
        echo "  tiffinfo version ${LIBTIFF_VERSION} confirmed."
    else
        echo "*** ERROR: Could not confirm tiffinfo version ${LIBTIFF_VERSION} in output!"
        exit 1
    fi

    echo "--- Verifying Library Linking ---"
    # These paths should now point to the new versions via environment vars
    LIBTIFF_LIB="${TIFF_HOME}/lib/libtiff.so"
    if [ ! -f "$LIBTIFF_LIB" ]; then echo "*** ERROR: Custom libtiff library not found at $LIBTIFF_LIB!"; exit 1; fi
    echo "Checking libtiff lib ($LIBTIFF_LIB)..."; ldd "$LIBTIFF_LIB"

    HDF5_LIB="${HDF5_HOME}/lib/libhdf5.so"
    if [ ! -f "$HDF5_LIB" ]; then echo "*** ERROR: HDF5 library not found at $HDF5_LIB!"; exit 1; fi
    echo "Checking HDF5 lib ($HDF5_LIB)..."; ldd "$HDF5_LIB"

    AMREX_LIB="${AMREX_HOME}/lib/libamrex.so"
    if [ ! -f "$AMREX_LIB" ]; then echo "*** ERROR: AMReX library not found at $AMREX_LIB!"; exit 1; fi
    echo "Checking AMReX lib ($AMREX_LIB)..."; ldd "$AMREX_LIB"

    HYPRE_LIB="${HYPRE_HOME}/lib/libHYPRE.so"
    if [ ! -f "$HYPRE_LIB" ]; then echo "*** ERROR: HYPRE library not found at $HYPRE_LIB!"; exit 1; fi
    echo "Checking HYPRE lib ($HYPRE_LIB)..."; ldd "$HYPRE_LIB"

    MPI_LIB="${OPENMPI_INSTALL_PREFIX}/lib/libmpi.so"
    if [ ! -f "$MPI_LIB" ]; then echo "*** ERROR: OpenMPI library not found at $MPI_LIB!"; exit 1; fi
    echo "Checking OpenMPI lib ($MPI_LIB)..."; ldd "$MPI_LIB"


    echo "--- Basic dependency container tests passed. ---"

%runscript
    echo "Container with build environment (GCC 11) and runtime dependencies for OpenImpala."
    echo "Using AMReX ${AMREX_VERSION}, HYPRE ${HYPRE_VERSION}." # Updated info
    echo "Includes custom build of libtiff ${LIBTIFF_VERSION}."
    echo "Does not contain OpenImpala itself. Intended for use with CI caching."

