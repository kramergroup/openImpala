Bootstrap: docker
From: quay.io/rockylinux/rockylinux:8 # Using Quay.io

%help
    Container providing the build environment and runtime dependencies for OpenImpala.
    Installs CMake via RPM (cmake3 from EPEL).
    Installs Parallel HDF5 (linked with OpenMPI) via RPM from EPEL.
    Installs OpenMPI, AMReX, HYPRE from source using GCC 11.

%labels
    Maintainer "James Le Houx <your-email@example.com>" # <-- UPDATE EMAIL
    Version 2.37-deps-gcc11-hdf5rpm # <-- Version from response #75

%post
    set -e # Ensure commands exit on error early

    # Define versions
    export OPENMPI_VERSION=4.1.6
    export AMREX_VERSION=23.11
    export HYPRE_VERSION=v2.30.0
    export HDF5_VERSION=1.12.3  # Choose a suitable HDF5 version
    export ZLIB_VERSION=system # Or specify if building zlib from source

    # --- Define Install Prefixes ---
    export OPENMPI_INSTALL_PREFIX=/usr/local
    export HDF5_INSTALL_PREFIX=/opt/hdf5/${HDF5_VERSION} # New HDF5 install path
    export AMREX_INSTALL_PREFIX=/opt/amrex/${AMREX_VERSION}
    export HYPRE_INSTALL_PREFIX=/opt/hypre/${HYPRE_VERSION}
    export ZLIB_ROOT=/usr # Assuming using system zlib

    # Add ldconfig paths early if needed
    echo "/usr/local/lib" > /etc/ld.so.conf.d/usrlocal.conf
    echo "${HDF5_INSTALL_PREFIX}/lib" > /etc/ld.so.conf.d/hdf5.conf # If building HDF5

    # --- Install Repositories and Packages ---
    echo "--- Updating system and installing EPEL ---"
    dnf update -y
    # Install tools for managing repos and EPEL itself
    # epel-release provides the EPEL repo definitions
    dnf install -y dnf-utils epel-release

    echo "--- Enabling PowerTools repository ---"
    # Enable the PowerTools repository (needed for hwloc-devel, flex-devel on Rocky 8)
    # Note: On Rocky 9+ this would be 'crb'
    dnf config-manager --set-enabled powertools

    echo "--- Installing Development Tools and Core Packages ---"
    # Now install all required packages, including those from BaseOS, AppStream, EPEL, and PowerTools
    # Ensure backslashes (\) are correct for line continuation
    dnf install -y \
        '@Development Tools' \
        gcc-gfortran \
        gcc-toolset-11 \
        cmake3 \
        wget \
        git \
        patch \
        python3 \
        python3-pip \
        hostname \
        infiniband-diags \
        libibverbs-devel \
        libtiff-devel \
        boost-devel \
        hwloc-devel \
        libevent-devel \
        flex \
        bison \
        flex-devel \
        which \
        ca-certificates \
        zlib-devel && \
    dnf clean all -y

    # --- Verification Step (Your existing check) ---
    echo "--- Verifying wget installation post dnf ---"
    which wget || { echo "!!! ERROR: wget command not found right after dnf install!"; exit 1; }
    echo "--- wget found, continuing build ---"


    mkdir /tmp/build_src && cd /tmp/build_src

    # --- Activate SCL ---
    echo "=== Sourcing GCC Toolset 11 enable script ==="
    source /opt/rh/gcc-toolset-11/enable
    export CC=$(which gcc); export CXX=$(which g++); export FC=$(which gfortran)

    # --- Verify CMake (from dnf) ---
    echo "--- Verifying CMake (from dnf) ---"
    which cmake && cmake --version || { echo "CMake (from dnf) verification failed!"; exit 1; }
    # --- Verify GCC ---
    which gcc && gcc --version | grep "(GCC) 11." || { echo "GCC 11 verification failed!"; exit 1; }

    # --- Install OpenMPI ---
    echo "--- Building OpenMPI ---"
    wget https://download.open-mpi.org/release/open-mpi/v${OPENMPI_VERSION%.*}/openmpi-${OPENMPI_VERSION}.tar.gz --no-check-certificate
    tar -xzf openmpi-${OPENMPI_VERSION}.tar.gz && cd openmpi-${OPENMPI_VERSION}
    ./configure --prefix=${OPENMPI_INSTALL_PREFIX} \
        --enable-orterun-prefix-by-default --enable-mpirun-prefix-by-default \
        --with-verbs --enable-shared --enable-static=no \
        CC="$CC" CXX="$CXX" FC="$FC"
    make -j$(nproc) LDFLAGS="-lfl"
    make install # Serial, No LDFLAGS
    cd .. && rm -rf openmpi-${OPENMPI_VERSION}*
    # --- Update PATH and ldconfig AFTER OpenMPI install ---
    export PATH=${OPENMPI_INSTALL_PREFIX}/bin:${PATH} # Prepend MPI bins
    ldconfig # Update linker cache for OpenMPI
    echo "--- Verifying OpenMPI install (mpicc) ---"
    which mpicc && mpicc --version || { echo "*** ERROR: mpicc not found after OpenMPI install!"; exit 1; }
    ldconfig -p | grep libmpi || echo "WARNING: libmpi not found in ldconfig cache"

    # --- Install HDF5 from Source (Parallel Version) ---
    echo "--- Building HDF5 ${HDF5_VERSION} from Source ---"
    wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-${HDF5_VERSION%.*}/hdf5-${HDF5_VERSION}/src/hdf5-${HDF5_VERSION}.tar.gz --no-check-certificate
    tar -xzf hdf5-${HDF5_VERSION}.tar.gz && cd hdf5-${HDF5_VERSION}
    # Configure HDF5 for parallel I/O using the MPI wrappers now in PATH
    # Ensure zlib is found (installed via dnf into /usr)
    CC=mpicc CXX=mpicxx FC=mpifort ./configure \
        --prefix=${HDF5_INSTALL_PREFIX} \
        --enable-parallel \
        --enable-shared \
        --enable-hl \
        --with-zlib=${ZLIB_ROOT}
    make -j$(nproc)
    make install # Serial install
    cd .. && rm -rf hdf5-${HDF5_VERSION}*
    # --- Update PATH and ldconfig AFTER HDF5 install ---
    export PATH=${HDF5_INSTALL_PREFIX}/bin:${PATH} # Prepend HDF5 bins
    ldconfig # Update linker cache for HDF5
    echo "--- Verifying HDF5 install (h5pcc) ---"
    which h5pcc && h5pcc -showconfig || { echo "*** ERROR: h5pcc not found or failed after HDF5 source install!"; exit 1; }
    ldconfig -p | grep libhdf5 || echo "WARNING: libhdf5 not found in ldconfig cache"

    # --- Install AMReX ---
    # Note: Ensure SCL is sourced and mpicc/mpicxx/mpif90 are in PATH before this step
    echo "--- Building AMReX ${AMREX_VERSION} ---"
    git clone --depth 1 --branch ${AMREX_VERSION} https://github.com/AMReX-Codes/amrex.git
    cd amrex
    mkdir build && cd build

    echo "--- Configuring AMReX ---"
    # Explicitly set MPI compilers via `which` to use the correct ones from PATH
    # Explicitly enable shared library building
    # Only list HDF5 in CMAKE_PREFIX_PATH as MPI should be found via compilers
    cmake .. \
        -DCMAKE_INSTALL_PREFIX=${AMREX_INSTALL_PREFIX} \
        -DCMAKE_BUILD_TYPE=Release \
        -DAMReX_MPI=ON \
        -DAMReX_OMP=ON \
        -DAMReX_EB=ON \
        -DAMReX_FORTRAN=ON \
        -DCMAKE_C_COMPILER=$(which mpicc) \
        -DCMAKE_CXX_COMPILER=$(which mpicxx) \
        -DCMAKE_Fortran_COMPILER=$(which mpif90) \
        -DBUILD_SHARED_LIBS=ON \
        -DCMAKE_CXX_FLAGS="-O3 -march=native" \
        -DCMAKE_C_FLAGS="-O3 -march=native" \
        -DCMAKE_Fortran_FLAGS="-O3 -march=native" \
        -DCMAKE_PREFIX_PATH="${HDF5_INSTALL_PREFIX}" \
    || { echo "*** AMReX Configure Failed!"; exit 1; }

    echo "--- Building AMReX (make) ---"
    make -j$(nproc) || { echo "*** AMReX Make Failed!"; exit 1; }

    echo "--- Installing AMReX (make install) ---"
    make install || { echo "*** AMReX Make Install Failed!"; exit 1; }

    # Verification step (recommended during debugging)
    echo "--- Checking AMReX installation contents in ${AMREX_INSTALL_PREFIX} ---"
    ls -lR ${AMREX_INSTALL_PREFIX} || echo "!!! WARNING: Failed to list AMReX install directory!"
    find ${AMREX_INSTALL_PREFIX} -name "libamrex*.so" || echo "--- WARNING: No libamrex*.so files found in AMReX install directory ---"
    echo "--- Finished checking AMReX installation ---"

    # Go back to the main build source directory
    cd ../..

    echo "--- Cleaning up AMReX source ---"
    rm -rf amrex

    # --- Install HYPRE ---
    echo "--- Building HYPRE ---"
    git clone --depth 1 --branch ${HYPRE_VERSION} https://github.com/hypre-space/hypre.git
    cd hypre/src
    # Configure should find MPI (mpicc) and HDF5 (h5pcc) via PATH now
    ./configure --prefix=${HYPRE_INSTALL_PREFIX} --with-MPI --enable-shared \
        CFLAGS="-O3 -march=native" CXXFLAGS="-O3 -march=native"
    make -j$(nproc) && make install # Serial install
    cd ../.. && rm -rf hypre

    echo "--- Dependency builds finished using GCC Toolset 11 ---"

    # --- Final Cleanup ---
    echo "=== Final PATH: $PATH ==="
    cd / && rm -rf /tmp/build_src
    dnf clean all

%environment
    # Define environment referencing the FINAL locations
    source /opt/rh/gcc-toolset-11/enable
    export LC_ALL=C; export LANG=C

    # Define versions (adjust HDF5 version if needed)
    export OPENMPI_VERSION=4.1.6
    export AMREX_VERSION=23.11
    export HYPRE_VERSION=v2.30.0
    export HDF5_VERSION=1.12.3 # Match version used in %post

    # Define Install Prefixes
    export AMREX_INSTALL_PREFIX=/opt/amrex/${AMREX_VERSION}
    export HYPRE_INSTALL_PREFIX=/opt/hypre/${HYPRE_VERSION}
    export OPENMPI_INSTALL_PREFIX=/usr/local
    export HDF5_INSTALL_PREFIX=/opt/hdf5/${HDF5_VERSION} # Updated HDF5 path
    export TIFF_HOME=/usr # System TIFF

    # Define HOME vars
    export AMREX_HOME=${AMREX_INSTALL_PREFIX}
    export HYPRE_HOME=${HYPRE_INSTALL_PREFIX}
    export HDF5_HOME=${HDF5_INSTALL_PREFIX} # Updated HDF5 path
    export H5CPP_HOME=${HDF5_HOME} # Assuming this follows HDF5_HOME
    export TIFF_HOME=${TIFF_HOME}

    # PATH: Prepend installed bins to SCL PATH
    export PATH=${AMREX_HOME}/bin:${HYPRE_HOME}/bin:${HDF5_HOME}/bin:${OPENMPI_INSTALL_PREFIX}/bin:${PATH} # Added HDF5 bin

    # LD_LIBRARY_PATH: Prepend installed libs
    export LD_LIBRARY_PATH=${AMREX_HOME}/lib:${HYPRE_HOME}/lib:${HDF5_HOME}/lib:${OPENMPI_INSTALL_PREFIX}/lib:${TIFF_HOME}/lib64:${LD_LIBRARY_PATH} # Added HDF5 lib, removed old system HDF5 path assumption

    # CMAKE_PREFIX_PATH: Point to install locations
    export CMAKE_PREFIX_PATH=${AMREX_HOME}:${HYPRE_HOME}:${HDF5_HOME}:${OPENMPI_INSTALL_PREFIX}:${TIFF_HOME}:${CMAKE_PREFIX_PATH} # Added HDF5 path

    export OMPI_MCA_btl_vader_single_copy_mechanism=none; export OMPI_MCA_rmaps_base_oversubscribe=1

%test
    set -e
    source /opt/rh/gcc-toolset-11/enable
    # Source the runtime environment defined in %environment for tests
    # (Variables like HDF5_HOME will be set based on %environment)
    export HDF5_VERSION=1.12.3 # Make sure version matches if needed directly
    export HDF5_INSTALL_PREFIX=/opt/hdf5/${HDF5_VERSION} # Define prefix for test section too

    echo "--- Verifying Tool Versions ---";
    echo "Checking mpicc..."; which mpicc; mpicc --version
    echo "Checking mpic++..."; which mpic++; mpic++ --version
    echo "Checking cmake..."; which cmake; cmake --version
    echo "Checking h5pcc..."; which h5pcc; ${HDF5_INSTALL_PREFIX}/bin/h5pcc -showconfig # Check source-built h5pcc
    echo "Checking gcc version..."; which gcc; gcc --version | grep "(GCC) 11."

    echo "--- Verifying Library Linking ---"
    # Check HDF5 library in the new location
    HDF5_MPI_LIB="${HDF5_INSTALL_PREFIX}/lib/libhdf5.so"
    if [ ! -f "$HDF5_MPI_LIB" ]; then echo "*** ERROR: HDF5 library not found at $HDF5_MPI_LIB!"; exit 1; fi
    echo "Checking HDF5 lib ($HDF5_MPI_LIB)..."; ldd "$HDF5_MPI_LIB"

    # Check other libraries
    echo "Checking AMReX lib (${AMREX_INSTALL_PREFIX}/lib/libamrex.so)..."; ldd "${AMREX_INSTALL_PREFIX}/lib/libamrex.so"
    echo "Checking HYPRE lib (${HYPRE_INSTALL_PREFIX}/lib/libHYPRE.so)..."; ldd "${HYPRE_INSTALL_PREFIX}/lib/libHYPRE.so"
    echo "Checking OpenMPI lib (${OPENMPI_INSTALL_PREFIX}/lib/libmpi.so)..."; ldd "${OPENMPI_INSTALL_PREFIX}/lib/libmpi.so"

    echo "--- Basic dependency container tests passed. ---"

%runscript
    echo "Container with build environment (GCC 11) and runtime dependencies for OpenImpala."
    echo "Does not contain OpenImpala itself. Intended for use with CI caching."
