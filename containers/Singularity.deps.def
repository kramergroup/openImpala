Bootstrap: docker
From: quay.io/rockylinux/rockylinux:8 # Using Quay.io

%help
    # ... (Help section) ...

%labels
    Maintainer "James Le Houx <your-email@example.com>" # <-- UPDATE EMAIL
    Version 2.31-deps-gcc11-exec-debug # <-- Updated version

%post
    set -e # Ensure commands exit on error early

    # Define versions used throughout the build
    export CMAKE_VERSION=3.28.3
    export OPENMPI_VERSION=4.1.6
    export HDF5_VERSION=1.12.3
    export AMREX_VERSION=23.11
    export HYPRE_VERSION=v2.30.0

    # Add /usr/local/lib to ld cache path
    echo "/usr/local/lib" > /etc/ld.so.conf.d/usrlocal.conf

    # ... (dnf installs as before) ...
    dnf update -y; dnf install -y dnf-utils epel-release && dnf update -y
    dnf config-manager --set-enabled powertools
    dnf install -y \
        '@Development Tools' gcc-gfortran gcc-toolset-11 \
        wget git patch python3 python3-pip hostname \
        infiniband-diags libibverbs-devel libtiff-devel boost-devel \
        hwloc-devel libevent-devel flex bison flex-devel \
        which ca-certificates && \
    dnf clean all -y

    # Create a temporary directory for building dependencies
    mkdir /tmp/build_src && cd /tmp/build_src

    # --- Activate GCC Toolset 11 directly ---
    echo "=== Sourcing GCC Toolset 11 enable script ==="
    source /opt/rh/gcc-toolset-11/enable
    # ... (Verification echoes: GCC version, SCL active, PATH) ...

    # Re-export versions
    # ... (export CMAKE_VERSION etc) ...

    # --- Install CMake ---
    # ... (CMake install and verification as before) ...

    # --- Install OpenMPI ---
    # ... (OpenMPI configure, make, install log capture, verification as before) ...
    echo "Running ldconfig..."
    ldconfig

    # --- Check ldconfig cache ---
    echo "--- Checking ldconfig cache for libmpi ---"
    ldconfig -p | grep libmpi || echo "libmpi not found in ldconfig cache"
    echo "--- End ldconfig check ---"

    # --- Manual MPI-IO Link Test ---
    echo "--- Attempting manual MPI-IO link test ---"
    cat << EOF > /tmp/build_src/test_mpiio.c
#include <stdio.h>
#include <mpi.h>
int main(int argc, char **argv) { MPI_File fh; MPI_Init(&argc, &argv); if(MPI_COMM_WORLD == MPI_COMM_NULL){fprintf(stderr, "COMM_WORLD NULL\\n"); MPI_Abort(MPI_COMM_WORLD,1);} int err=MPI_File_open(MPI_COMM_WORLD, "dummy.txt", MPI_MODE_CREATE|MPI_MODE_WRONLY, MPI_INFO_NULL, &fh); if(err!=MPI_SUCCESS){fprintf(stderr,"MPI_File_open failed %d\\n",err); MPI_Abort(MPI_COMM_WORLD,err);} MPI_File_close(&fh); MPI_Finalize(); return 0;}
EOF
    # --- ADDED: Detailed check right before mpicc execution ---
    echo "--- Environment state JUST before mpicc link command ---"
    echo "Current PATH: $PATH"
    echo "Running: which mpicc"
    MPICC_PATH=$(which mpicc || echo "mpicc_not_found")
    echo "which mpicc result: $MPICC_PATH"
    if [ "$MPICC_PATH" != "mpicc_not_found" ]; then
        echo "--- Details for mpicc and target ---"
        ls -l "$MPICC_PATH" || echo "ls mpicc FAILED"
        # Assuming mpicc links to opal_wrapper in the same dir
        OPAL_WRAPPER_PATH=$(dirname "$MPICC_PATH")/opal_wrapper
        ls -l "$OPAL_WRAPPER_PATH" || echo "ls opal_wrapper FAILED"
        echo "--- opal_wrapper shebang ---"
        head -n 1 "$OPAL_WRAPPER_PATH" || echo "head opal_wrapper FAILED"
        echo "--- opal_wrapper ldd ---"
        ldd "$OPAL_WRAPPER_PATH" || echo "ldd opal_wrapper FAILED"
        echo "--- Attempting opal_wrapper --version ---"
        "$OPAL_WRAPPER_PATH" --version || echo "opal_wrapper --version FAILED (Code: $?)"
    else
        echo "Skipping detailed checks as mpicc was not found by which."
    fi
    echo "--- End detailed checks ---"

    echo "Running: hash -r (clearing command hash)"
    hash -r

    echo "--- Running: mpicc test_mpiio.c -o test_mpiio -L/usr/local/lib ---"
    # Capture stderr as well
    mpicc /tmp/build_src/test_mpiio.c -o /tmp/build_src/test_mpiio -L/usr/local/lib > /tmp/build_src/mpiio_link.log 2>&1
    LINK_EXIT_CODE=$?
    # --- END ADDED checks ---

    if [ $LINK_EXIT_CODE -ne 0 ]; then
        echo "*** ERROR: Manual MPI-IO link test FAILED! Exit Code: $LINK_EXIT_CODE ***" >&2
        echo "*** Linker/Command output: ***" >&2
        cat /tmp/build_src/mpiio_link.log >&2
        exit $LINK_EXIT_CODE
    else
        echo "--- Manual MPI-IO link test SUCCEEDED ---"
        rm -f /tmp/build_src/test_mpiio.c /tmp/build_src/test_mpiio /tmp/build_src/mpiio_link.log dummy.txt
    fi
    # --- END Manual MPI-IO Link Test ---

    # --- Install HDF5 ---
    # ... (Simplified HDF5 install as before) ...

    # --- Install AMReX ---
    # ... (Simplified AMReX install as before) ...

    # --- Install HYPRE ---
    # ... (Simplified HYPRE install as before) ...

    # ... (Rest of %post script) ...

%environment
    # ... (Environment section unchanged) ...
    source /opt/rh/gcc-toolset-11/enable
    export LC_ALL=C; export LANG=C
    export CMAKE_VERSION=3.28.3; export OPENMPI_VERSION=4.1.6; export HDF5_VERSION=1.12.3; export AMREX_VERSION=23.11; export HYPRE_VERSION=v2.30.0
    export CMAKE_HOME=/opt/cmake/${CMAKE_VERSION}; export HDF5_HOME=/opt/hdf5/${HDF5_VERSION}; export AMREX_HOME=/opt/amrex/${AMREX_VERSION}; export HYPRE_HOME=/opt/hypre/${HYPRE_VERSION}; export H5CPP_HOME=${HDF5_HOME}; export TIFF_HOME=/usr
    export PATH=${CMAKE_HOME}/bin:${HDF5_HOME}/bin:/usr/local/bin:${PATH}
    export LD_LIBRARY_PATH=${HDF5_HOME}/lib:${AMREX_HOME}/lib:${HYPRE_HOME}/lib:${TIFF_HOME}/lib64:/usr/local/lib:${LD_LIBRARY_PATH}
    export CMAKE_PREFIX_PATH=${HDF5_HOME}:${AMREX_HOME}:${HYPRE_HOME}:${TIFF_HOME}:/usr/local:${CMAKE_PREFIX_PATH}
    export OMPI_MCA_btl_vader_single_copy_mechanism=none; export OMPI_MCA_rmaps_base_oversubscribe=1

%test
    # ... (Test section unchanged) ...
    set -e
    source /opt/rh/gcc-toolset-11/enable
    echo "--- Verifying Tool Versions ---"; echo "--- Contents of /usr/local/bin at start of %test ---"; ls -l /usr/local/bin
    echo "Checking mpicc..."; which mpicc; mpicc --version
    echo "Checking mpic++..."; which mpic++; mpic++ --version
    echo "Checking cmake..."; which cmake; cmake --version
    echo "Checking gcc version..."; which gcc; gcc --version | grep "(GCC) 11."
    echo "--- Verifying Library Linking ---"
    echo "Checking HDF5 lib (/opt/hdf5/${HDF5_VERSION}/lib/libhdf5.so)..."; ldd "/opt/hdf5/${HDF5_VERSION}/lib/libhdf5.so"
    echo "Checking AMReX lib (/opt/amrex/${AMREX_VERSION}/lib/libamrex.so)..."; ldd "/opt/amrex/${AMREX_VERSION}/lib/libamrex.so"
    echo "Checking HYPRE lib (/opt/hypre/${HYPRE_VERSION}/lib/libHYPRE.so)..."; ldd "/opt/hypre/${HYPRE_VERSION}/lib/libHYPRE.so"
    echo "Checking OpenMPI lib (/usr/local/lib/libmpi.so)..."; ldd "/usr/local/lib/libmpi.so"
    echo "--- Basic dependency container tests passed. ---"

%runscript
    # ... (Runscript section unchanged) ...
    echo "Container with build environment (GCC 11) and runtime dependencies for OpenImpala."
    echo "Does not contain OpenImpala itself. Intended for use with CI caching."
