Bootstrap: docker
From: rockylinux:8

%help
    Container providing the build environment and runtime dependencies for OpenImpala.

    Installs:
      * Rocky Linux 8 Base OS & Updates
      * Development Tools (GCC 11 via Toolset, Make, etc.) & Fortran Compiler
      * OpenMPI 4.1.6 (built from source, with IB support, using GCC 11)
      * CMake 3.28.3 (binary distribution)
      * HDF5 1.12.3 (Parallel, Fortran, C++, built from source w/ GCC 11 & OpenMPI)
      * AMReX 23.11 (built from source w/ GCC 11, MPI, OMP, EB)
      * HYPRE v2.30.0 (built from source w/ GCC 11, MPI)
      * Support libraries: libtiff, boost, python3, hwloc, libevent, flex, bison

    This container is intended to be used as a base or cache for building OpenImpala itself.

%labels
    Maintainer "James Le Houx <your-email@example.com>" # <-- UPDATE EMAIL
    Version 2.13-deps-gcc11-explicit-cc # <-- UPDATE AS NEEDED (Incremented for explicit compiler set)

%post
    # Define versions used throughout the build
    export CMAKE_VERSION=3.28.3
    export OPENMPI_VERSION=4.1.6
    export HDF5_VERSION=1.12.3
    export AMREX_VERSION=23.11
    export HYPRE_VERSION=v2.30.0

    # Update and install base utilities & repositories
    dnf update -y
    dnf install -y dnf-utils
    dnf config-manager --set-enabled powertools
    dnf install -y epel-release
    dnf update -y

    # Install 'Development Tools' group, base GCC/GFortran (for bootstrap), GCC Toolset 11, AND other required packages
    dnf install -y \
        '@Development Tools' \
        gcc-gfortran \
        gcc-toolset-11 \
        wget git patch \
        python3 python3-pip \
        hostname \
        infiniband-diags libibverbs-devel \
        libtiff-devel boost-devel \
        hwloc-devel libevent-devel \
        flex bison flex-devel \
        which ca-certificates && \
    dnf clean all -y

    # Create a temporary directory for building dependencies
    mkdir /tmp/build_src
    cd /tmp/build_src

    # --- Enable GCC Toolset 11 and Build Dependencies inside this environment ---
    echo "=== Enabling GCC Toolset 11 for dependency builds ==="
    scl enable gcc-toolset-11 -- bash -c '
        set -e # Exit immediately if any command fails

        # Re-export versions needed within this subshell
        export CMAKE_VERSION=3.28.3
        export OPENMPI_VERSION=4.1.6
        export HDF5_VERSION=1.12.3
        export AMREX_VERSION=23.11
        export HYPRE_VERSION=v2.30.0
        echo "--- Now using GCC $(gcc --version) ---"

        # --- Install CMake (Recent Version) ---
        echo "--- Installing CMake ---"
        export CMAKE_INSTALL_PREFIX=/opt/cmake/${CMAKE_VERSION}
        wget https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-x86_64.tar.gz
        mkdir -p ${CMAKE_INSTALL_PREFIX}
        tar -xzf cmake-${CMAKE_VERSION}-linux-x86_64.tar.gz --strip-components=1 -C ${CMAKE_INSTALL_PREFIX}
        rm -f cmake-${CMAKE_VERSION}-linux-x86_64.tar.gz
        export PATH=${CMAKE_INSTALL_PREFIX}/bin:${PATH} # Add CMake to PATH for subsequent steps
        cmake --version

        # --- Install OpenMPI (Recent Version) ---
        echo "--- Building OpenMPI ---"
        export OPENMPI_INSTALL_PREFIX=/usr/local # Install to standard prefix
        wget https://download.open-mpi.org/release/open-mpi/v${OPENMPI_VERSION%.*}/openmpi-${OPENMPI_VERSION}.tar.gz --no-check-certificate
        tar -xzf openmpi-${OPENMPI_VERSION}.tar.gz
        cd openmpi-${OPENMPI_VERSION}

        # Explicitly set compilers from the SCL environment for ./configure
        export CC=$(which gcc)
        export CXX=$(which g++)
        export FC=$(which gfortran)
        echo "*** Using CC=$CC ***"
        echo "*** Using CXX=$CXX ***"
        echo "*** Using FC=$FC ***"

        ./configure \
            --prefix=${OPENMPI_INSTALL_PREFIX} \
            --enable-orterun-prefix-by-default \
            --enable-mpirun-prefix-by-default \
            --with-verbs \
            --enable-shared \
            --enable-static=no \
            CC="$CC" CXX="$CXX" FC="$FC" # Pass explicitly too

        # Add LDFLAGS="-lfl" to make and make install (Needed for flex interaction)
        make -j$(nproc) LDFLAGS="-lfl"
        make install LDFLAGS="-lfl" # Keep LDFLAGS here for now

        MPI_INSTALL_EXIT_CODE=$? # Capture exit code immediately
        echo "*** OpenMPI '\''make install'\'' finished with exit code: $MPI_INSTALL_EXIT_CODE ***"
        if [ $MPI_INSTALL_EXIT_CODE -ne 0 ]; then
            echo "*** ERROR: OpenMPI '\''make install'\'' failed! Exit code: $MPI_INSTALL_EXIT_CODE ***"
            exit $MPI_INSTALL_EXIT_CODE
        fi

        # --- BEGIN Enhanced OpenMPI Install Verification ---
        echo "*** START MPICC CHECK ***"
        ls -l /usr/local/bin/mpicc || echo "*** ls /usr/local/bin/mpicc command failed - file likely missing ***"
        if [ -f /usr/local/bin/mpicc ]; then
            echo "*** OK: MPICC FILE EXISTS ***"
            which mpicc || echo "*** which mpicc command failed? ***"
            /usr/local/bin/mpicc --version || echo "*** mpicc --version command failed? ***"
        else
            echo "*** !! MPICC FILE NOT FOUND !! ***"
            echo "*** Contents of /usr/local/bin: ***"
            ls -l /usr/local/bin || echo "*** ls /usr/local/bin FAILED ***"
            echo "*** EXITING SCRIPT DUE TO MISSING MPICC ***"
            exit 1 # Force failure here if mpicc is missing
        fi
        echo "*** END MPICC CHECK ***"
        # --- END Enhanced OpenMPI Install Verification ---

        cd ..
        rm -rf openmpi-${OPENMPI_VERSION}*
        ldconfig # Update library cache for /usr/local/lib

        # --- Install HDF5 (with Parallel, Fortran, C++) ---
        echo "--- Building HDF5 ---"
        export HDF5_INSTALL_PREFIX=/opt/hdf5/${HDF5_VERSION}
        wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-${HDF5_VERSION%.*}/hdf5-${HDF5_VERSION}/src/hdf5-${HDF5_VERSION}.tar.gz --no-check-certificate
        tar -xzf hdf5-${HDF5_VERSION}.tar.gz
        cd hdf5-${HDF5_VERSION}
        # Ensure MPI wrappers use the toolset compilers (CC/CXX/FC should still be set from OpenMPI section)
        echo "--- Using HDF5 CC=$CC CXX=$CXX FC=$FC ---" # Add verification
        export CFLAGS="-O3 -march=native"
        export CXXFLAGS="${CFLAGS}"
        export FCFLAGS="${CFLAGS}"
        ./configure \
            --prefix=${HDF5_INSTALL_PREFIX} \
            --enable-parallel \
            --enable-fortran \
            --enable-fortran2003 \
            --enable-cxx \
            --enable-shared \
            --disable-static \
            --enable-unsupported # Allow C++/Parallel
        make -j$(nproc) install
        cd ..
        rm -rf hdf5-${HDF5_VERSION}*

        # --- Install AMReX (Recent Stable Tag using CMake) ---
        echo "--- Building AMReX ---"
        export AMREX_INSTALL_PREFIX=/opt/amrex/${AMREX_VERSION}
        git clone --depth 1 --branch ${AMREX_VERSION} https://github.com/AMReX-Codes/amrex.git
        cd amrex
        mkdir build && cd build
        # CMake should pick up CC/CXX/FC from environment (MPI wrappers using toolset GCC)
        # Pass CMAKE_PREFIX_PATH for HDF5
        cmake .. \
            -DCMAKE_INSTALL_PREFIX=${AMREX_INSTALL_PREFIX} \
            -DCMAKE_BUILD_TYPE=Release \
            -DAMReX_MPI=ON \
            -DAMReX_OMP=ON \
            -DAMReX_EB=ON \
            -DCMAKE_CXX_FLAGS="-O3 -march=native" \
            -DCMAKE_C_FLAGS="-O3 -march=native" \
            -DCMAKE_Fortran_FLAGS="-O3 -march=native" \
            -DCMAKE_PREFIX_PATH="${HDF5_INSTALL_PREFIX}"
        make -j$(nproc) install
        cd ../.. # Back to /tmp/build_src
        rm -rf amrex

        # --- Install HYPRE (Recent Stable Tag) ---
        echo "--- Building HYPRE ---"
        export HYPRE_INSTALL_PREFIX=/opt/hypre/${HYPRE_VERSION}
        git clone --depth 1 --branch ${HYPRE_VERSION} https://github.com/hypre-space/hypre.git
        cd hypre/src
        # Ensure configure uses the MPI wrappers (which use the toolset GCC)
        # CC/CXX should still be set from OpenMPI section
        echo "--- Using HYPRE CC=$CC CXX=$CXX ---" # Add verification
        ./configure \
            --prefix=${HYPRE_INSTALL_PREFIX} \
            --with-MPI \
            --enable-shared \
            CFLAGS="-O3 -march=native" \
            CXXFLAGS="-O3 -march=native"
        make -j$(nproc) install
        cd ../.. # Back to /tmp/build_src
        rm -rf hypre

        echo "--- Dependency builds finished using GCC Toolset 11 ---"

    ' # End of bash -c '...' for scl enable

    echo "=== GCC Toolset 11 Section Finished ==="

    # --- Final Cleanup ---
    cd /
    rm -rf /tmp/build_src # Remove downloaded sources for dependencies
    dnf clean all

%environment
    # --- Activate GCC Toolset 11 by default ---
    source /opt/rh/gcc-toolset-11/enable
    # ------------------------------------------

    # Set locale
    export LC_ALL=C
    export LANG=C

    # Define versions based on build stage (must match %post)
    export CMAKE_VERSION=3.28.3
    export OPENMPI_VERSION=4.1.6
    export HDF5_VERSION=1.12.3
    export AMREX_VERSION=23.11
    export HYPRE_VERSION=v2.30.0

    # Installation prefixes
    export CMAKE_HOME=/opt/cmake/${CMAKE_VERSION}
    export HDF5_HOME=/opt/hdf5/${HDF5_VERSION}
    export AMREX_HOME=/opt/amrex/${AMREX_VERSION}
    export HYPRE_HOME=/opt/hypre/${HYPRE_VERSION}
    export H5CPP_HOME=${HDF5_HOME} # Set H5CPP_HOME based on HDF5_HOME
    export TIFF_HOME=/usr          # Set TIFF_HOME for dnf installation

    # Add binaries to PATH (scl enable should handle toolset path, add others)
    export PATH=${CMAKE_HOME}/bin:${HDF5_HOME}/bin:/usr/local/bin:${PATH}

    # Add libraries to LD_LIBRARY_PATH (scl enable adds toolset libs, add ours)
    export LD_LIBRARY_PATH=${HDF5_HOME}/lib:${AMREX_HOME}/lib:${HYPRE_HOME}/lib:${TIFF_HOME}/lib64:/usr/local/lib:${LD_LIBRARY_PATH}

    # Set CMAKE_PREFIX_PATH to help CMake-based projects find these dependencies
    export CMAKE_PREFIX_PATH=${HDF5_HOME}:${AMREX_HOME}:${HYPRE_HOME}:${TIFF_HOME}:/usr/local:${CMAKE_PREFIX_PATH}

    # Ensure OpenMPI runs correctly within Singularity
    export OMPI_MCA_btl_vader_single_copy_mechanism=none
    export OMPI_MCA_rmaps_base_oversubscribe=1 # Allow oversubscription if needed

%test
    # --- Activate GCC Toolset 11 ---
    source /opt/rh/gcc-toolset-11/enable
    # -------------------------------

    # Verify tools are found and versions are reasonable
    echo "--- Verifying Tool Versions ---"

    # --- Contents of /usr/local/bin at start of %test ---
    echo "--- Contents of /usr/local/bin at start of %test ---"
    ls -l /usr/local/bin || echo "Failed to list /usr/local/bin"
    echo "--- End of /usr/local/bin listing ---"
    # --- END ADDED LS COMMAND ---

    which mpicc && mpicc --version || exit 1
    which cmake && cmake --version || exit 1
    which gcc && gcc --version | grep "(GCC) 11." || (echo "ERROR: GCC is not version 11!"; gcc --version; exit 1)

    # Check if libraries are found by linker (simple ldd check)
    echo "--- Verifying Library Linking ---"
    # Need full paths to .so files for ldd
    ldd ${HDF5_HOME}/lib/libhdf5.so | grep -E 'not found|statically linked' || echo "HDF5 lib OK"
    ldd ${AMREX_HOME}/lib/libamrex.so | grep -E 'not found|statically linked' || echo "AMReX lib OK"
    ldd ${HYPRE_HOME}/lib/libHYPRE.so | grep -E 'not found|statically linked' || echo "HYPRE lib OK"
    ldd /usr/local/lib/libmpi.so | grep -E 'not found|statically linked' || echo "OpenMPI lib OK" # Check OpenMPI lib

    # DO NOT check for OpenImpala executable here
    echo "--- Verifying OpenImpala Build ---"
    echo "Skipping OpenImpala check in dependency build."

    echo "--- Basic dependency container tests passed. ---"

%runscript
    echo "Container with build environment (GCC 11) and runtime dependencies for OpenImpala."
    echo "Does not contain OpenImpala itself. Intended for use with CI caching."
