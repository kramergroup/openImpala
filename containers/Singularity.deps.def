Bootstrap: docker
From: quay.io/rockylinux/rockylinux:8

%help
    Container providing the build environment and runtime dependencies for OpenImpala.

    Installs:
      * Rocky Linux 8 Base OS & Updates
      * Development Tools (GCC 11 via Toolset, Make, etc.) & Fortran Compiler
      * OpenMPI 4.1.6 (built from source, with IB support, using GCC 11)
      * CMake 3.28.3 (binary distribution)
      * HDF5 1.12.3 (Parallel, Fortran, C++, built from source w/ GCC 11 & OpenMPI)
      * AMReX 23.11 (built from source w/ GCC 11, MPI, OMP, EB)
      * HYPRE v2.30.0 (built from source w/ GCC 11, MPI)
      * Support libraries: libtiff, boost, python3, hwloc, libevent, flex, bison

    This container is intended to be used as a base or cache for building OpenImpala itself.

%labels
    Maintainer "James Le Houx <your-email@example.com>" # <-- UPDATE EMAIL
    Version 2.24-deps-gcc11-hdf5-link-debug-v2 # <-- Version from response #55

%post
    set -e # Ensure dnf commands exit on error early

    # Define versions used throughout the build
    export CMAKE_VERSION=3.28.3
    export OPENMPI_VERSION=4.1.6
    export HDF5_VERSION=1.12.3
    export AMREX_VERSION=23.11
    export HYPRE_VERSION=v2.30.0

    # Update and install base utilities & repositories
    dnf update -y
    dnf install -y dnf-utils
    dnf config-manager --set-enabled powertools
    dnf install -y epel-release
    dnf update -y
    dnf install -y \
        '@Development Tools' \
        gcc-gfortran \
        gcc-toolset-11 \
        wget git patch \
        python3 python3-pip \
        hostname \
        infiniband-diags libibverbs-devel \
        libtiff-devel boost-devel \
        hwloc-devel libevent-devel \
        flex bison flex-devel \
        which ca-certificates && \
    dnf clean all -y

    # --- Ensure /usr/local/lib is in ld cache path --- (Keep this, might help runtime linking)
    echo "/usr/local/lib" > /etc/ld.so.conf.d/usrlocal.conf
    # --- END ---

    # Create a temporary directory for building dependencies
    mkdir /tmp/build_src
    cd /tmp/build_src

    # --- Activate GCC Toolset 11 directly ---
    echo "=== Sourcing GCC Toolset 11 enable script ==="
    source /opt/rh/gcc-toolset-11/enable
    echo "--- Now using GCC $(gcc --version) ---"
    echo "--- SCL ACTIVE? ---"
    env | grep SCL || echo "No SCL variables found"
    echo "--- Current PATH ---"
    echo "$PATH"
    # -----------------------------------------

    # Re-export versions
    export CMAKE_VERSION=${CMAKE_VERSION}
    export OPENMPI_VERSION=${OPENMPI_VERSION}
    export HDF5_VERSION=${HDF5_VERSION}
    export AMREX_VERSION=${AMREX_VERSION}
    export HYPRE_VERSION=${HYPRE_VERSION}

    # --- Install CMake (Recent Version) ---
    echo "--- Installing CMake ---"
    export CMAKE_INSTALL_PREFIX=/opt/cmake/${CMAKE_VERSION}
    wget https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-x86_64.tar.gz
    mkdir -p ${CMAKE_INSTALL_PREFIX}
    tar -xzf cmake-${CMAKE_VERSION}-linux-x86_64.tar.gz --strip-components=1 -C ${CMAKE_INSTALL_PREFIX}
    echo "--- Verifying CMake installation ---"
    ls -l ${CMAKE_INSTALL_PREFIX}/bin/cmake
    ${CMAKE_INSTALL_PREFIX}/bin/cmake --version
    rm -f cmake-${CMAKE_VERSION}-linux-x86_64.tar.gz
    export PATH=${CMAKE_INSTALL_PREFIX}/bin:${PATH}
    echo "--- Verifying CMake via PATH ---"
    which cmake && cmake --version || exit 1

    # --- Install OpenMPI (Recent Version) ---
    echo "--- Building OpenMPI ---"
    export OPENMPI_INSTALL_PREFIX=/usr/local
    wget https://download.open-mpi.org/release/open-mpi/v${OPENMPI_VERSION%.*}/openmpi-${OPENMPI_VERSION}.tar.gz --no-check-certificate
    tar -xzf openmpi-${OPENMPI_VERSION}.tar.gz
    cd openmpi-${OPENMPI_VERSION}
    export CC=$(which gcc)
    export CXX=$(which g++)
    export FC=$(which gfortran)
    echo "*** Using CC=$CC CXX=$CXX FC=$FC ***"
    ./configure \
        --prefix=${OPENMPI_INSTALL_PREFIX} \
        --enable-orterun-prefix-by-default \
        --enable-mpirun-prefix-by-default \
        --with-verbs \
        --enable-shared \
        --enable-static=no \
        CC="$CC" CXX="$CXX" FC="$FC"
    if [ -f config.log ]; then
        echo "--- Found OpenMPI config.log, tailing last 50 lines: ---"
        tail -n 50 config.log || echo "Tailing OpenMPI config.log failed"
        echo "--- End OpenMPI config.log tail ---"
    else
        echo "--- OpenMPI config.log not found after configure ---"
    fi
    echo "*** Running make -j$(nproc) ***"
    make -j$(nproc) LDFLAGS="-lfl" # Build parallel
    echo "*** Running make install SERIAL NO LDFLAGS capturing output ***"
    make install > /tmp/build_src/mpi_install.log 2>&1 || { \
        echo "*** ERROR: OpenMPI make install returned non-zero status! Log below: ***"; \
        cat /tmp/build_src/mpi_install.log; \
        exit 1; \
    }
    echo "*** make install finished exit 0, install log contents: ***"
    cat /tmp/build_src/mpi_install.log || echo "Failed to cat mpi_install.log"
    echo "*** End make install log ***"
    echo "*** Verifying mpicc existence immediately after install ***"
    ls -l /usr/local/bin/mpicc || echo "*** /usr/local/bin/mpicc NOT FOUND immediately after install ***"
    cd ..
    rm -rf openmpi-${OPENMPI_VERSION}* mpi_install.log
    echo "Running ldconfig..."
    ldconfig

    # --- Check ldconfig cache for MPI ---
    echo "--- Checking ldconfig cache for libmpi ---"
    ldconfig -p | grep libmpi || echo "libmpi not found in ldconfig cache"
    echo "--- End ldconfig check ---"

    # --- Manual MPI-IO Link Test (Keep explicit -L for robustness check) ---
    echo "--- Attempting manual MPI-IO link test ---"
    cat << EOF > /tmp/build_src/test_mpiio.c
#include <stdio.h>
#include <mpi.h>
int main(int argc, char **argv) { MPI_File fh; MPI_Init(&argc, &argv); if(MPI_COMM_WORLD == MPI_COMM_NULL){fprintf(stderr, "COMM_WORLD NULL\\n"); MPI_Abort(MPI_COMM_WORLD,1);} int err=MPI_File_open(MPI_COMM_WORLD, "dummy.txt", MPI_MODE_CREATE|MPI_MODE_WRONLY, MPI_INFO_NULL, &fh); if(err!=MPI_SUCCESS){fprintf(stderr,"MPI_File_open failed %d\\n",err); MPI_Abort(MPI_COMM_WORLD,err);} MPI_File_close(&fh); MPI_Finalize(); return 0;}
EOF
    echo "--- Running: mpicc test_mpiio.c -o test_mpiio -L/usr/local/lib ---"
    mpicc /tmp/build_src/test_mpiio.c -o /tmp/build_src/test_mpiio -L/usr/local/lib > /tmp/build_src/mpiio_link.log 2>&1
    LINK_EXIT_CODE=$?
    if [ $LINK_EXIT_CODE -ne 0 ]; then
        echo "*** ERROR: Manual MPI-IO link test FAILED! Exit Code: $LINK_EXIT_CODE ***" >&2
        echo "*** Linker/Command output: ***" >&2
        cat /tmp/build_src/mpiio_link.log >&2
        exit $LINK_EXIT_CODE
    else
        echo "--- Manual MPI-IO link test SUCCEEDED ---"
        rm -f /tmp/build_src/test_mpiio.c /tmp/build_src/test_mpiio /tmp/build_src/mpiio_link.log dummy.txt
    fi
    # --- END Manual MPI-IO Link Test ---

    # --- Install HDF5 (with Parallel, Fortran, C++) ---
    echo "--- Building HDF5 ---"
    export HDF5_INSTALL_PREFIX=/opt/hdf5/${HDF5_VERSION}
    wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-${HDF5_VERSION%.*}/hdf5-${HDF5_VERSION}/src/hdf5-${HDF5_VERSION}.tar.gz --no-check-certificate
    tar -xzf hdf5-${HDF5_VERSION}.tar.gz
    cd hdf5-${HDF5_VERSION}
    echo "--- Using HDF5 CC=$CC CXX=$CXX FC=$FC ---"
    export CFLAGS="-O3 -march=native"
    export CXXFLAGS="${CFLAGS}"
    export FCFLAGS="${CFLAGS}"
    # --- Re-add explicit LDFLAGS for configure ---
    export LDFLAGS="-L/usr/local/lib"
    echo "--- Running HDF5 configure with LDFLAGS=${LDFLAGS} ---"
    # Use robust log capture from response #55
    set +e
    ./configure \
        --prefix=${HDF5_INSTALL_PREFIX} \
        --enable-parallel \
        --enable-fortran \
        --enable-fortran2003 \
        --enable-cxx \
        --enable-shared \
        --disable-static \
        --enable-unsupported > hdf5_configure_output.log 2>&1
    CONFIGURE_EXIT_CODE=$?
    if [ $CONFIGURE_EXIT_CODE -ne 0 ]; then
        echo "*** ERROR: HDF5 configure failed! Exit Code: $CONFIGURE_EXIT_CODE ***" >&2
        echo "*** HDF5 config.log tail (last 150 lines): ***" >&2
        tail -n 150 config.log || echo "Failed to tail HDF5 config.log" >&2
        exit $CONFIGURE_EXIT_CODE
    fi
    set -e # Re-enable exit on error
    echo "--- HDF5 configure finished (exit 0) ---"
    unset LDFLAGS # Unset after configure

    echo "*** Running make -j$(nproc) for HDF5 ***"
    make -j$(nproc) # Build parallel
    echo "*** Running make install for HDF5 SERIAL ***"
    make install # Install serial
    cd ..
    rm -rf hdf5-${HDF5_VERSION}* hdf5_configure_output.log # Clean up log

    # --- Install AMReX (Recent Stable Tag using CMake) ---
    echo "--- Building AMReX ---"
    export AMREX_INSTALL_PREFIX=/opt/amrex/${AMREX_VERSION}
    git clone --depth 1 --branch ${AMREX_VERSION} https://github.com/AMReX-Codes/amrex.git
    cd amrex
    mkdir build && cd build
    # Add LDFLAGS for CMake link steps
    export LDFLAGS="-L/usr/local/lib -L${HDF5_INSTALL_PREFIX}/lib"
    echo "--- Running AMReX cmake with LDFLAGS=${LDFLAGS} ---"
    cmake .. \
        -DCMAKE_INSTALL_PREFIX=${AMREX_INSTALL_PREFIX} \
        -DCMAKE_BUILD_TYPE=Release \
        -DAMReX_MPI=ON \
        -DAMReX_OMP=ON \
        -DAMReX_EB=ON \
        -DCMAKE_CXX_FLAGS="-O3 -march=native" \
        -DCMAKE_C_FLAGS="-O3 -march=native" \
        -DCMAKE_Fortran_FLAGS="-O3 -march=native" \
        -DCMAKE_EXE_LINKER_FLAGS="${LDFLAGS}" \
        -DCMAKE_SHARED_LINKER_FLAGS="${LDFLAGS}" \
        -DCMAKE_MODULE_LINKER_FLAGS="${LDFLAGS}" \
        -DCMAKE_PREFIX_PATH="${HDF5_INSTALL_PREFIX};/usr/local" # Added /usr/local
    AMREX_CMAKE_EXIT_CODE=$?
    unset LDFLAGS # Unset after cmake
    if [ $AMREX_CMAKE_EXIT_CODE -ne 0 ]; then
        echo "*** ERROR: AMReX cmake failed! Exit Code: $AMREX_CMAKE_EXIT_CODE ***" >&2
        exit $AMREX_CMAKE_EXIT_CODE
    fi
    echo "*** Running make -j$(nproc) for AMReX ***"
    make -j$(nproc) # Build parallel
    echo "*** Running make install for AMReX SERIAL ***"
    make install # Install serial
    cd ../..
    rm -rf amrex

    # --- Install HYPRE (Recent Stable Tag) ---
    echo "--- Building HYPRE ---"
    export HYPRE_INSTALL_PREFIX=/opt/hypre/${HYPRE_VERSION}
    git clone --depth 1 --branch ${HYPRE_VERSION} https://github.com/hypre-space/hypre.git
    cd hypre/src
    echo "--- Using HYPRE CC=$CC CXX=$CXX ---"
    # Add LDFLAGS for HYPRE configure
    export LDFLAGS="-L/usr/local/lib"
    echo "--- Running HYPRE configure with LDFLAGS=${LDFLAGS} ---"
    set +e
    ./configure \
        --prefix=${HYPRE_INSTALL_PREFIX} \
        --with-MPI \
        --enable-shared \
        CFLAGS="-O3 -march=native" \
        CXXFLAGS="-O3 -march=native"
    HYPRE_CONFIGURE_EXIT_CODE=$?
    if [ $HYPRE_CONFIGURE_EXIT_CODE -ne 0 ]; then
        echo "*** ERROR: HYPRE configure failed! Exit Code: $HYPRE_CONFIGURE_EXIT_CODE ***" >&2
        echo "*** HYPRE config.log tail (last 150 lines): ***" >&2
        tail -n 150 config.log || echo "Failed to tail HYPRE config.log" >&2
        exit $HYPRE_CONFIGURE_EXIT_CODE
    fi
    set -e # Re-enable exit on error
    echo "--- HYPRE configure finished (exit 0) ---"
    unset LDFLAGS # Unset after configure

    echo "*** Running make -j$(nproc) for HYPRE ***"
    make -j$(nproc) # Build parallel
    echo "*** Running make install for HYPRE SERIAL ***"
    make install # Install serial
    cd ../..
    rm -rf hypre

    echo "--- Dependency builds finished using GCC Toolset 11 ---"

    # --- Final Cleanup ---
    echo "=== Cleaning up build directory ==="
    cd /
    rm -rf /tmp/build_src
    dnf clean all

%environment
    # ... (Environment section unchanged) ...
    source /opt/rh/gcc-toolset-11/enable
    export LC_ALL=C; export LANG=C
    export CMAKE_VERSION=3.28.3; export OPENMPI_VERSION=4.1.6; export HDF5_VERSION=1.12.3; export AMREX_VERSION=23.11; export HYPRE_VERSION=v2.30.0
    export CMAKE_HOME=/opt/cmake/${CMAKE_VERSION}; export HDF5_HOME=/opt/hdf5/${HDF5_VERSION}; export AMREX_HOME=/opt/amrex/${AMREX_VERSION}; export HYPRE_HOME=/opt/hypre/${HYPRE_VERSION}; export H5CPP_HOME=${HDF5_HOME}; export TIFF_HOME=/usr
    export PATH=${CMAKE_HOME}/bin:${HDF5_HOME}/bin:/usr/local/bin:${PATH}
    export LD_LIBRARY_PATH=${HDF5_HOME}/lib:${AMREX_HOME}/lib:${HYPRE_HOME}/lib:${TIFF_HOME}/lib64:/usr/local/lib:${LD_LIBRARY_PATH}
    export CMAKE_PREFIX_PATH=${HDF5_HOME}:${AMREX_HOME}:${HYPRE_HOME}:${TIFF_HOME}:/usr/local:${CMAKE_PREFIX_PATH}
    export OMPI_MCA_btl_vader_single_copy_mechanism=none; export OMPI_MCA_rmaps_base_oversubscribe=1

%test
    # ... (Test section unchanged) ...
    set -e
    source /opt/rh/gcc-toolset-11/enable
    echo "--- Verifying Tool Versions ---"; echo "--- Contents of /usr/local/bin at start of %test ---"; ls -l /usr/local/bin
    echo "Checking mpicc..."; which mpicc; mpicc --version
    echo "Checking mpic++..."; which mpic++; mpic++ --version
    echo "Checking cmake..."; which cmake; cmake --version
    echo "Checking gcc version..."; which gcc; gcc --version | grep "(GCC) 11."
    echo "--- Verifying Library Linking ---"
    echo "Checking HDF5 lib (/opt/hdf5/${HDF5_VERSION}/lib/libhdf5.so)..."; ldd "/opt/hdf5/${HDF5_VERSION}/lib/libhdf5.so"
    echo "Checking AMReX lib (/opt/amrex/${AMREX_VERSION}/lib/libamrex.so)..."; ldd "/opt/amrex/${AMREX_VERSION}/lib/libamrex.so"
    echo "Checking HYPRE lib (/opt/hypre/${HYPRE_VERSION}/lib/libHYPRE.so)..."; ldd "/opt/hypre/${HYPRE_VERSION}/lib/libHYPRE.so"
    echo "Checking OpenMPI lib (/usr/local/lib/libmpi.so)..."; ldd "/usr/local/lib/libmpi.so"
    echo "--- Basic dependency container tests passed. ---"

%runscript
    # ... (Runscript section unchanged) ...
    echo "Container with build environment (GCC 11) and runtime dependencies for OpenImpala."
    echo "Does not contain OpenImpala itself. Intended for use with CI caching."
