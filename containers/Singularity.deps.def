Bootstrap: docker
From: quay.io/rockylinux/rockylinux:8 # Using Quay.io

%help
    Container providing the build environment and runtime dependencies for OpenImpala.
    Installs OpenMPI, AMReX, HYPRE from source using GCC 11.
    Installs Parallel HDF5 (linked with OpenMPI) via RPM from EPEL.
    # ... (rest of help) ...

%labels
    Maintainer "James Le Houx <your-email@example.com>" # <-- UPDATE EMAIL
    Version 2.38-deps-gcc11-hdf5rpm # <-- Updated version

%post
    set -e # Ensure commands exit on error early

    # Define versions (HDF5 version now comes from RPM)
    export CMAKE_VERSION=3.28.3
    export OPENMPI_VERSION=4.1.6
    # export HDF5_VERSION=1.12.3 # No longer building from source
    export AMREX_VERSION=23.11
    export HYPRE_VERSION=v2.30.0

    # Add ldconfig path for locally built OpenMPI
    echo "/usr/local/lib" > /etc/ld.so.conf.d/usrlocal.conf

    # Install base packages + HDF5 RPMs from EPEL
    dnf update -y; dnf install -y dnf-utils epel-release && dnf update -y
    dnf config-manager --set-enabled powertools
    dnf install -y \
        '@Development Tools' gcc-gfortran gcc-toolset-11 \
        wget git patch python3 python3-pip hostname \
        infiniband-diags libibverbs-devel libtiff-devel boost-devel \
        hwloc-devel libevent-devel flex bison flex-devel \
        which ca-certificates zlib-devel \
        hdf5-openmpi hdf5-openmpi-devel # <-- Use HDF5 RPMs
    dnf clean all -y

    # --- Define Install Prefixes (HDF5 uses system path /usr) ---
    export CMAKE_INSTALL_PREFIX=/opt/cmake/${CMAKE_VERSION}
    export OPENMPI_INSTALL_PREFIX=/usr/local
    export HDF5_INSTALL_PREFIX=/usr # HDF5 now installed via RPM to system paths
    export AMREX_INSTALL_PREFIX=/opt/amrex/${AMREX_VERSION}
    export HYPRE_INSTALL_PREFIX=/opt/hypre/${HYPRE_VERSION}

    mkdir /tmp/build_src && cd /tmp/build_src

    # --- Activate SCL and Install/Verify CMake ---
    echo "=== Sourcing GCC Toolset 11 enable script ==="
    source /opt/rh/gcc-toolset-11/enable
    # ... (CMake install & verification as before) ...
    export PATH=${CMAKE_INSTALL_PREFIX}/bin:${PATH}
    which cmake && cmake --version || exit 1
    which gcc && gcc --version | grep "(GCC) 11." || exit 1

    # --- Install OpenMPI ---
    # ... (OpenMPI build/install as before) ...
    export PATH=${OPENMPI_INSTALL_PREFIX}/bin:${PATH}
    ldconfig
    which mpicc && mpicc --version || exit 1
    ldconfig -p | grep libmpi || echo "WARNING: libmpi not found in ldconfig cache"

    # --- Verify HDF5 RPM Installation ---
    echo "--- Verifying HDF5 RPM install (h5pcc) ---"
    # The h5pcc wrapper should now be in the PATH provided by the openmpi module loaded by SCL/OpenMPI install?
    # Or maybe directly in /usr/bin if installed system-wide but linked to openmpi
    which h5pcc || { echo "*** ERROR: h5pcc not found after RPM install!"; exit 1; }
    echo "Found h5pcc at: $(which h5pcc)"
    h5pcc -showconfig || { echo "*** ERROR: h5pcc -showconfig failed!"; exit 1; }
    echo "--- Checking for HDF5 MPI library file ---"
    # Common locations for RPM installs linked against modules
    HDF5_LIB_PATH=$(find /usr/lib64 -name "libhdf5_openmpi.so" -o -name "libhdf5_parallel.so" | head -n 1)
    if [ -z "$HDF5_LIB_PATH" ]; then
        echo "*** ERROR: HDF5 MPI library .so file not found in /usr/lib64 area!"
        exit 1
    else
        echo "Found HDF5 MPI library at: $HDF5_LIB_PATH"
        # Check its linkage
        ldd "$HDF5_LIB_PATH" || { echo "*** ERROR: ldd failed on HDF5 library!"; exit 1; }
    fi
    echo "--- HDF5 RPM verification passed ---"
    # -----------------------------------

    # --- REMOVED HDF5 Source Build Section ---

    # --- Install AMReX ---
    echo "--- Building AMReX ---"
    git clone --depth 1 --branch ${AMREX_VERSION} https://github.com/AMReX-Codes/amrex.git
    cd amrex && mkdir build && cd build
    # CMake should find HDF5 and MPI via system paths and wrappers now
    # Adjust CMAKE_PREFIX_PATH to just point to OpenMPI install
    cmake .. -DCMAKE_INSTALL_PREFIX=${AMREX_INSTALL_PREFIX} \
        -DCMAKE_BUILD_TYPE=Release \
        -DAMReX_MPI=ON -DAMReX_OMP=ON -DAMReX_EB=ON \
        -DCMAKE_CXX_FLAGS="-O3 -march=native" \
        -DCMAKE_C_FLAGS="-O3 -march=native" \
        -DCMAKE_Fortran_FLAGS="-O3 -march=native" \
        -DCMAKE_PREFIX_PATH="${OPENMPI_INSTALL_PREFIX}" # HDF5 should be found system-wide
    make -j$(nproc) && make install # Serial install
    cd ../.. && rm -rf amrex

    # --- Install HYPRE ---
    echo "--- Building HYPRE ---"
    git clone --depth 1 --branch ${HYPRE_VERSION} https://github.com/hypre-space/hypre.git
    cd hypre/src
    # Configure should find MPI via wrappers/system paths
    ./configure --prefix=${HYPRE_INSTALL_PREFIX} --with-MPI --enable-shared \
        CFLAGS="-O3 -march=native" CXXFLAGS="-O3 -march=native"
    make -j$(nproc) && make install # Serial install
    cd ../.. && rm -rf hypre

    echo "--- Dependency builds finished using GCC Toolset 11 ---"

    # --- Final Cleanup ---
    echo "=== Final PATH: $PATH ==="
    cd / && rm -rf /tmp/build_src
    dnf clean all

%environment
    # Define environment referencing the FINAL locations
    source /opt/rh/gcc-toolset-11/enable
    export LC_ALL=C; export LANG=C
    # Get HDF5 version from RPM if needed, otherwise remove or set placeholder
    # export HDF5_VERSION=$(rpm -q --qf '%{VERSION}' hdf5-openmpi) # This won't work here, do in %post if needed
    export CMAKE_VERSION=3.28.3; export OPENMPI_VERSION=4.1.6; export AMREX_VERSION=23.11; export HYPRE_VERSION=v2.30.0
    export CMAKE_INSTALL_PREFIX=/opt/cmake/${CMAKE_VERSION}
    export HDF5_INSTALL_PREFIX=/usr # HDF5 now from system
    export AMREX_INSTALL_PREFIX=/opt/amrex/${AMREX_VERSION}
    export HYPRE_INSTALL_PREFIX=/opt/hypre/${HYPRE_VERSION}
    export OPENMPI_INSTALL_PREFIX=/usr/local
    export CMAKE_HOME=${CMAKE_INSTALL_PREFIX}; export HDF5_HOME=${HDF5_INSTALL_PREFIX}; export AMREX_HOME=${AMREX_INSTALL_PREFIX}; export HYPRE_HOME=${HYPRE_INSTALL_PREFIX}; export H5CPP_HOME=${HDF5_HOME}; export TIFF_HOME=/usr
    # Update PATH - h5pcc etc should be in /usr/bin or MPI module path
    export PATH=${CMAKE_HOME}/bin:${AMREX_HOME}/bin:${HYPRE_HOME}/bin:${OPENMPI_INSTALL_PREFIX}/bin:${HDF5_HOME}/bin:${PATH}
    # Update LD_LIBRARY_PATH - HDF5 libs likely in /usr/lib64/openmpi/lib or /usr/lib64
    export LD_LIBRARY_PATH=${AMREX_HOME}/lib:${HYPRE_HOME}/lib:${OPENMPI_INSTALL_PREFIX}/lib:${HDF5_HOME}/lib64:/usr/lib64/openmpi/lib:${TIFF_HOME}/lib64:${LD_LIBRARY_PATH} # Add potential HDF5 MPI lib location
    # Update CMAKE_PREFIX_PATH - Point to /usr for HDF5
    export CMAKE_PREFIX_PATH=${AMREX_HOME}:${HYPRE_HOME}:${OPENMPI_INSTALL_PREFIX}:${HDF5_HOME}:${TIFF_HOME}:${CMAKE_PREFIX_PATH}
    export OMPI_MCA_btl_vader_single_copy_mechanism=none; export OMPI_MCA_rmaps_base_oversubscribe=1

%test
    set -e
    source /opt/rh/gcc-toolset-11/enable
    echo "--- Verifying Tool Versions ---"; echo "--- Contents of /usr/local/bin at start of %test ---"; ls -l /usr/local/bin
    echo "Checking mpicc..."; which mpicc; mpicc --version
    echo "Checking mpic++..."; which mpic++; mpic++ --version
    echo "Checking cmake..."; which cmake; cmake --version
    echo "Checking h5pcc..."; which h5pcc; h5pcc -showconfig # Check HDF5 parallel compiler wrapper
    echo "Checking gcc version..."; which gcc; gcc --version | grep "(GCC) 11."
    echo "--- Verifying Library Linking ---"
    # Update paths for HDF5 library check - use find again for flexibility
    HDF5_MPI_LIB=$(find /usr/lib64 -name "libhdf5_openmpi.so" -o -name "libhdf5_parallel.so" | head -n 1) || HDF5_MPI_LIB="NOT_FOUND"
    if [ "$HDF5_MPI_LIB" == "NOT_FOUND" ]; then echo "*** ERROR: HDF5 MPI library not found!"; exit 1; fi
    echo "Checking HDF5 lib ($HDF5_MPI_LIB)..."; ldd "$HDF5_MPI_LIB"
    echo "Checking AMReX lib (${AMREX_INSTALL_PREFIX}/lib/libamrex.so)..."; ldd "${AMREX_INSTALL_PREFIX}/lib/libamrex.so"
    echo "Checking HYPRE lib (${HYPRE_INSTALL_PREFIX}/lib/libHYPRE.so)..."; ldd "${HYPRE_INSTALL_PREFIX}/lib/libHYPRE.so"
    echo "Checking OpenMPI lib (${OPENMPI_INSTALL_PREFIX}/lib/libmpi.so)..."; ldd "${OPENMPI_INSTALL_PREFIX}/lib/libmpi.so"
    echo "--- Basic dependency container tests passed. ---"

%runscript
    # ... (Runscript section unchanged) ...
    echo "Container with build environment (GCC 11) and runtime dependencies for OpenImpala."
    echo "Does not contain OpenImpala itself. Intended for use with CI caching."
