# .github/workflows/build-test.yml
name: Build and Test OpenImpala Makefile with SIF Cache

# Define workflow triggers
on:
  push:
    # Trigger on pushes to these specific branches
    branches:
      - main
      - working
      - build
      - 'makefile' # Include makefile branch trigger
  pull_request:
    # Trigger on Pull Requests targeting main branch
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-openimpala: # Indent Level 1 (2 spaces)
    runs-on: ubuntu-latest # Indent Level 2 (4 spaces)

    steps: # Indent Level 2 (4 spaces)
      # Step 1: Check out the repository code to the runner workspace
      - name: Checkout repository # Indent Level 3 (6 spaces for '-')
        uses: actions/checkout@v4 # Indent Level 4 (8 spaces)

      # Step 2: Install the specified version of Apptainer (Singularity successor)
      - name: Set up Apptainer
        uses: eWaterCycle/setup-apptainer@v2
        with: # Indent Level 4 (8 spaces)
          apptainer-version: 1.2.5 # Indent Level 5 (10 spaces)

      # Step 3: Attempt to restore the cached SIF image to speed up builds
      - name: Restore Dependency SIF Cache
        id: cache-restore-sif
        uses: actions/cache/restore@v4
        with:
          path: dependency_image.sif # Indent Level 5 (10 spaces)
          key: ${{ runner.os }}-apptainer-sif-${{ hashFiles('containers/Singularity.deps.def') }}
          restore-keys: | # Indent Level 5 (10 spaces)
            ${{ runner.os }}-apptainer-sif- # Indent Level 6 (12 spaces)

      # Step 4: Build the SIF image using the .def file IF it wasn't restored from cache
      - name: Build Dependency SIF Image Locally (if cache miss)
        if: steps.cache-restore-sif.outputs.cache-hit != 'true'
        run: | # Indent Level 4 (8 spaces)
          # Lines below indented relative to 'run:' (Level 5 = 10 spaces)
          RECIPE_FILE="containers/Singularity.deps.def"
          TARGET_SIF="dependency_image.sif"
          # Verify the recipe file exists
          if [ ! -f "$RECIPE_FILE" ]; then
            echo "Error: Dependency recipe file $RECIPE_FILE not found!"
            exit 1
          fi
          echo "Cache miss or invalid. Building dependencies SIF image '$TARGET_SIF' from $RECIPE_FILE..."
          # Build the image using sudo (required by apptainer build)
          # --force ensures overwriting any potentially incomplete SIF from previous failed runs
          sudo apptainer build --force "$TARGET_SIF" "$RECIPE_FILE"
          # Check the exit code immediately after build attempt
          BUILD_EXIT_CODE=$?
          if [ $BUILD_EXIT_CODE -ne 0 ]; then
            echo "Error: Apptainer SIF build failed with exit code $BUILD_EXIT_CODE."
            exit $BUILD_EXIT_CODE # Exit the step if build failed
          fi
          echo "Apptainer SIF build successful."
          ls -lh ./dependency_image.sif # List file size as confirmation

      # Step 5: Verify the SIF file exists (essential check before trying to use it)
      - name: Verify SIF exists after cache/build step
        run: |
          # Lines below indented relative to 'run:' (Level 5 = 10 spaces)
          if [ ! -f "./dependency_image.sif" ]; then
            echo "Error: dependency_image.sif not found after cache/build steps!"
            exit 1 # Fail the job if the SIF isn't present
          else
            echo "dependency_image.sif found."
            ls -lh ./dependency_image.sif # List file size
          fi

      # <<< NEW DEBUG STEP - Check Indentation Carefully >>>
      # '-' below should align with '-' of step above (Level 3 = 6 spaces)
      - name: Debug Find AMReX Assert Header in Container
        # 'run:' below should indent relative to '-' (Level 4 = 8 spaces)
        run: |
          # Lines below should indent relative to 'run:' (Level 5 = 10 spaces)
          echo "--- Searching for *assert*.H within AMReX include directory in the container ---"
          # Execute find inside the container using sudo (as build step uses sudo)
          sudo apptainer exec ./dependency_image.sif find /opt/amrex/23.11/include -name '*assert*.H' || echo "Find command potentially failed or found nothing."
          echo "--- Finished search ---"
      # <<< END OF NEW DEBUG STEP >>>

      # Step 6: Build the main OpenImpala application code using the SIF environment
      # '-' below should align with '-' of step above (Level 3 = 6 spaces)
      - name: Build OpenImpala using Dependency SIF
        id: make_build # ID to reference the outcome of this step later
        continue-on-error: true
        run: |
          # Lines below indented relative to 'run:' (Level 5 = 10 spaces)
          echo "Setting environment variables for Make..."
          export AMREX_HOME=/opt/amrex/23.11
          export HYPRE_HOME=/opt/hypre/v2.30.0
          export HDF5_HOME=/opt/hdf5/1.12.3
          export H5CPP_HOME=${HDF5_HOME}
          export TIFF_HOME=/usr

          echo "Using AMREX_HOME=${AMREX_HOME}"
          echo "Using HYPRE_HOME=${HYPRE_HOME}"
          echo "Using HDF5_HOME=${HDF5_HOME}"

          echo "Running make clean..."
          sudo apptainer exec \
            --bind $PWD:/src \
            ./dependency_image.sif \
            bash -c 'source /opt/rh/gcc-toolset-11/enable && cd /src && make clean'

          echo "Running make -d..."
          sudo apptainer exec \
            --bind $PWD:/src \
            ./dependency_image.sif \
            bash -c 'source /opt/rh/gcc-toolset-11/enable && cd /src && make -d -j$(nproc)' > make_debug_output.log 2>&1

          MAKE_EXIT_CODE=$?
          echo "Make exit code: $MAKE_EXIT_CODE"
          if [ $MAKE_EXIT_CODE -ne 0 ]; then
            echo "Make command failed."
            exit $MAKE_EXIT_CODE
          fi
          echo "Make command finished successfully."

      # Step 7: Upload the detailed make debug log as a workflow artifact
      - name: Upload Make Debug Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: make-debug-log-${{ github.run_id }} # Indent Level 5 (10 spaces)
          path: make_debug_output.log
          retention-days: 5

      # Step 8: Explicitly fail the JOB if the make step failed
      - name: Fail job if make failed
        if: steps.make_build.outcome == 'failure'
        run: |
          # Lines below indented relative to 'run:' (Level 5 = 10 spaces)
          echo "Make command failed. See uploaded 'make-debug-log' artifact for details."
          exit 1 # Exit with non-zero code to fail the entire job run

      # Step 9: Save the SIF image to the cache if it was built locally
      - name: Save Dependency SIF Image Cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: dependency_image.sif # Indent Level 5 (10 spaces)
          key: ${{ runner.os }}-apptainer-sif-${{ hashFiles('containers/Singularity.deps.def') }}

      # Optional: Add steps here to run tests using the SIF image IF make succeeded
      # - name: Run Tests
      #   if: steps.make_build.outcome == 'success'
      #   run: |
      #     export AMREX_HOME=/opt/amrex/23.11
      #     export HYPRE_HOME=/opt/hypre/v2.30.0
      #     export HDF5_HOME=/opt/hdf5/1.12.3
      #     export H5CPP_HOME=${HDF5_HOME}
      #     export TIFF_HOME=/usr
      #
      #     echo "Running tests..."
      #     sudo apptainer exec --bind $PWD:/src \
      #       ./dependency_image.sif \
      #       bash -c 'source /opt/rh/gcc-toolset-11/enable && cd /src && make test' # Example: run tests via make
