# .github/workflows/build-test.yml
name: Build and Test OpenImpala Makefile (Singularity Cache)

on:
  push:
    # Trigger on pushes to these specific branches
    branches:
      - main
      - working
      - build
      - 'makefile' # Include makefile branch trigger
  pull_request:
    # Trigger on Pull Requests targeting main branch
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  # Job 1: Build dependencies and cache them in a sandbox
  cache-dependencies:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key-step.outputs.key }} # Output the key used

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Apptainer
        uses: eWaterCycle/setup-apptainer@v2
        with:
          apptainer-version: 1.2.5 # Use consistent version

      - name: Generate Cache Key
        id: cache-key-step
        # Key based on hash of the dependency recipe file + runner OS + date
        run: |
          RECIPE_FILE="containers/Singularity.deps.def"
          CACHE_DATE=$(date +'%Y-%m') # Add month to key to allow periodic refresh
          # Use literal path string for hashFiles
          echo "key=deps-cache-${{ runner.os }}-${CACHE_DATE}-$(echo -n ${{ hashFiles('containers/Singularity.deps.def') }} | md5sum | cut -d ' ' -f 1)" >> $GITHUB_OUTPUT

      - name: Cache Dependency Install Directories
        id: cache-deps
        uses: actions/cache@v4
        with:
          # Cache only the relevant installation directories within the sandbox
          # Use multi-line path syntax
          path: |
            ./dependency_sandbox/opt
            ./dependency_sandbox/usr/local
          key: ${{ steps.cache-key-step.outputs.key }}
          # restore-keys: | # Optional: allow restoring slightly older caches
          #   deps-cache-${{ runner.os }}-

      - name: Build Dependencies Sandbox (if cache miss)
        # This step runs only if the specific cache directories weren't found
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          RECIPE_FILE="containers/Singularity.deps.def"
          if [ ! -f "$RECIPE_FILE" ]; then
            echo "Error: Dependency recipe file $RECIPE_FILE not found!"
            exit 1
          fi
          echo "Building dependencies sandbox from $RECIPE_FILE..."
          # Build into a sandbox directory (folder) using sudo
          sudo apptainer build --sandbox ./dependency_sandbox "$RECIPE_FILE"
          # Check build exit status IMMEDIATELY
          if [ $? -ne 0 ]; then
             echo "Error: Apptainer build failed."
             exit 1 # Exit if build failed
          fi
          echo "Apptainer build successful. Fixing sandbox permissions for cache..."
          # Still chown the sandbox root, which propagates to /opt and /usr/local
          # Needed so the 'runner' user can read files during cache save
          sudo chown -R $(whoami):$(id -gn) ./dependency_sandbox
          echo "Permissions fixed for caching."
      # Note: The step to remove sensitive files is removed as we are not caching them.

  # Job 2: Build OpenImpala using the cached dependencies
  build-openimpala:
    needs: cache-dependencies # Run after dependencies are cached/restored
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Apptainer
        uses: eWaterCycle/setup-apptainer@v2
        with:
          apptainer-version: 1.2.5 # Use consistent version

      - name: Restore Dependency Install Directories
        id: cache-deps
        uses: actions/cache@v4
        with:
          # Restore the same specific directories
          path: |
            ./dependency_sandbox/opt
            ./dependency_sandbox/usr/local
          key: ${{ needs.cache-dependencies.outputs.cache-key }}
          # Fail job if cache cannot be restored (indicates dependency build failed)
          fail-on-cache-miss: true

      - name: Check if Dependency Dirs exist
        # This check ensures the cache restore actually brought back the needed directories
        run: |
          if [ ! -d "./dependency_sandbox/opt" ] || [ ! -d "./dependency_sandbox/usr/local" ]; then
            echo "Error: Dependency directories (/opt, /usr/local) not found within sandbox after cache restore."
            exit 1
          fi
          # Check if expected library directories exist (optional)
          ls -ld ./dependency_sandbox/opt/hdf5/*/lib || exit 1
          ls -ld ./dependency_sandbox/opt/amrex/*/lib || exit 1
          ls -ld ./dependency_sandbox/opt/hypre/*/lib || exit 1
          ls -ld ./dependency_sandbox/usr/local/lib || exit 1
          echo "Dependency directories restored successfully."

      - name: Build OpenImpala using Cached Dependencies
        run: |
          echo "Building OpenImpala inside sandbox environment..."
          # Execute 'make' inside the sandbox environment USING SUDO
          sudo apptainer exec --bind $PWD:/opt/openImpala \
            ./dependency_sandbox \
            bash -c 'cd /opt/openImpala && make clean && make -j$(nproc)'
          # Check make exit status
          if [ $? -ne 0 ]; then
            echo "Error: OpenImpala make failed."
            exit 1
          fi
          echo "OpenImpala built successfully."

      # Optional: Add steps here to run tests using the sandbox
      # - name: Run Tests
      #   run: |
      #     apptainer exec --bind $PWD:/opt/openImpala \
      #       ./dependency_sandbox \
      #       bash -c 'cd /opt/openImpala/build/tests && ./tSomeTest'
