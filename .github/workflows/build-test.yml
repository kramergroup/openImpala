# .github/workflows/build-test.yml
name: Build and Test OpenImpala Makefile with SIF Cache

# Define workflow triggers
on:
  push:
    # Trigger on pushes to these specific branches
    branches:
      - main
      - working
      - build
      - 'makefile' # Include makefile branch trigger
  pull_request:
    # Trigger on Pull Requests targeting main branch
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-and-test-openimpala: # Renamed job for clarity
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Install Apptainer
      - name: Set up Apptainer
        uses: eWaterCycle/setup-apptainer@v2
        with:
          apptainer-version: 1.2.5

      # Step 3: Restore Dependency SIF Cache
      - name: Restore Dependency SIF Cache
        id: cache-restore-sif
        uses: actions/cache/restore@v4
        with:
          path: dependency_image.sif
          key: ${{ runner.os }}-apptainer-sif-${{ hashFiles('containers/Singularity.deps.def') }}
          restore-keys: |
            ${{ runner.os }}-apptainer-sif-

      # Step 4: Build Dependency SIF Image (if cache miss)
      - name: Build Dependency SIF Image Locally (if cache miss)
        if: steps.cache-restore-sif.outputs.cache-hit != 'true'
        run: |
          RECIPE_FILE="containers/Singularity.deps.def"
          TARGET_SIF="dependency_image.sif"
          if [ ! -f "$RECIPE_FILE" ]; then
            echo "Error: Dependency recipe file $RECIPE_FILE not found!"
            exit 1
          fi
          echo "Cache miss or invalid. Building dependencies SIF image '$TARGET_SIF' from $RECIPE_FILE..."
          # Use sudo for apptainer build as it often requires root privileges
          sudo apptainer build --force "$TARGET_SIF" "$RECIPE_FILE"
          BUILD_EXIT_CODE=$?
          if [ $BUILD_EXIT_CODE -ne 0 ]; then
            echo "Error: Apptainer SIF build failed with exit code $BUILD_EXIT_CODE."
            exit $BUILD_EXIT_CODE
          fi
          echo "Apptainer SIF build successful."
          ls -lh ./dependency_image.sif

      # Step 5: Verify SIF exists
      - name: Verify SIF exists after cache/build step
        run: |
          if [ ! -f "./dependency_image.sif" ]; then
            echo "Error: dependency_image.sif not found after cache/build steps!"
            exit 1
          else
            echo "dependency_image.sif found."
            ls -lh ./dependency_image.sif
          fi

      # Step 6: Build OpenImpala using Dependency SIF
      - name: Build OpenImpala using Dependency SIF
        id: make_build
        continue-on-error: true # Allow logs to upload even if build fails
        run: |
          echo "Running make clean..."
          # Use sudo for apptainer exec if needed, depends on setup, but build used sudo
          sudo apptainer exec \
            --bind $PWD:/src \
            ./dependency_image.sif \
            bash -c 'source /opt/rh/gcc-toolset-11/enable && cd /src && make clean'

          echo "Running make all..."
          # Run build, redirect stdout/stderr to log file
          sudo apptainer exec \
            --bind $PWD:/src \
            ./dependency_image.sif \
            bash -c 'source /opt/rh/gcc-toolset-11/enable && cd /src && make all -j$(nproc)' > make_build_output.log 2>&1

          MAKE_EXIT_CODE=$?
          echo "Make build exit code: $MAKE_EXIT_CODE"
          # Exit step with the make exit code (relevant for continue-on-error)
          exit $MAKE_EXIT_CODE

      # Step 7: Upload Build Log
      - name: Upload Build Log
        # Always run this step to get logs, especially on failure
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: make-build-log-${{ github.run_id }}
          path: make_build_output.log
          retention-days: 5
          if-no-files-found: warn # Add this in case log file isn't created

      # Step 8: Explicitly fail the JOB if the make build step failed
      - name: Check build outcome
        if: steps.make_build.outcome == 'failure'
        run: |
          echo "Make build command failed. See uploaded 'make-build-log' artifact for details."
          exit 1 # Exit with non-zero code to fail the entire job run

      # Step 9: Run Tests using Dependency SIF (only if build succeeded)
      - name: Run Tests using Dependency SIF
        id: make_test
        if: steps.make_build.outcome == 'success' # Only run if build was successful
        continue-on-error: true # Allow test logs/backtrace to upload even if tests fail
        run: |
          echo "Running make test..."
          # Run tests, redirect stdout/stderr to log file
          # Backtrace files should be created in the CWD (/src) inside container
          sudo apptainer exec \
            --bind $PWD:/src \
            ./dependency_image.sif \
            bash -c 'source /opt/rh/gcc-toolset-11/enable && cd /src && make test' > make_test_output.log 2>&1

          TEST_EXIT_CODE=$?
          echo "Make test exit code: $TEST_EXIT_CODE"
          # Exit step with the test exit code (relevant for continue-on-error)
          exit $TEST_EXIT_CODE

      # Step 10: Upload Test Log and Backtrace (only if tests were attempted)
      - name: Upload Test Log and Backtrace
        # Run if tests were attempted (build succeeded), regardless of test outcome
        if: always() && steps.make_build.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: make-test-output-${{ github.run_id }} # Changed name slightly for clarity
          path: |                                     # Use multi-line path syntax
            make_test_output.log
            Backtrace.* # Add Backtrace files (glob pattern checks PWD)
          retention-days: 5
          if-no-files-found: warn                     # Don't fail job if Backtrace.* not found

      # Step 11: Explicitly fail the JOB if the make test step failed
      - name: Check test outcome
        # Only check if tests were actually run (build succeeded) and they failed
        if: steps.make_build.outcome == 'success' && steps.make_test.outcome == 'failure'
        run: |
          echo "Make test command failed. See uploaded 'make-test-output' artifact for details."
          exit 1 # Exit with non-zero code to fail the entire job run

      # Step 12: Save the SIF image to the cache
      - name: Save Dependency SIF Image Cache
        # Run if the SIF was built locally (cache miss), regardless of build/test outcome
        if: steps.cache-restore-sif.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: dependency_image.sif
          key: ${{ runner.os }}-apptainer-sif-${{ hashFiles('containers/Singularity.deps.def') }}
