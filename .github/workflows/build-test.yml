# .github/workflows/build-test.yml
name: Build and Test OpenImpala Makefile (Singularity SIF Cache)

on:
  push:
    # Trigger on pushes to these specific branches
    branches:
      - main
      - working
      - build
      - 'makefile' # Include makefile branch trigger
  pull_request:
    # Trigger on Pull Requests targeting main branch
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  # Job 1: Build dependency SIF image and cache it
  cache-dependencies:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key-step.outputs.key }} # Output the key used

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Apptainer
        uses: eWaterCycle/setup-apptainer@v2
        with:
          apptainer-version: 1.2.5 # Use consistent version

      - name: Generate Cache Key
        id: cache-key-step
        # Key based on hash of the dependency recipe file + runner OS + date
        run: |
          RECIPE_FILE="containers/Singularity.deps.def"
          CACHE_DATE=$(date +'%Y-%m') # Add month to key to allow periodic refresh
          # Use literal path string for hashFiles and indicate SIF cache
          echo "key=deps-sif-cache-${{ runner.os }}-${CACHE_DATE}-$(echo -n ${{ hashFiles('containers/Singularity.deps.def') }} | md5sum | cut -d ' ' -f 1)" >> $GITHUB_OUTPUT

      - name: Cache Dependency SIF Image
        id: cache-deps
        uses: actions/cache@v4
        with:
          # Cache the single SIF file
          path: dependency_image.sif
          key: ${{ steps.cache-key-step.outputs.key }}
          # restore-keys: | # Optional: allow restoring slightly older caches
          #   deps-sif-cache-${{ runner.os }}-

      - name: Build Dependency SIF Image (if cache miss)
        # This step runs only if the SIF file wasn't found in the cache
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          RECIPE_FILE="containers/Singularity.deps.def"
          TARGET_SIF="dependency_image.sif"
          if [ ! -f "$RECIPE_FILE" ]; then
            echo "Error: Dependency recipe file $RECIPE_FILE not found!"
            exit 1
          fi
          echo "Building dependencies SIF image '$TARGET_SIF' from $RECIPE_FILE..."
          # Build the SIF file directly using sudo
          sudo apptainer build "$TARGET_SIF" "$RECIPE_FILE"
          # Check build exit status IMMEDIATELY
          if [ $? -ne 0 ]; then
             echo "Error: Apptainer SIF build failed."
             exit 1 # Exit if build failed
          fi
          echo "Apptainer SIF build successful."
      # No chown/rm needed as we are caching the single SIF file

  # Job 2: Build OpenImpala using the cached dependency SIF
  build-openimpala:
    needs: cache-dependencies # Run after dependencies are cached/restored
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Apptainer
        uses: eWaterCycle/setup-apptainer@v2
        with:
          apptainer-version: 1.2.5 # Use consistent version

      - name: Restore Dependency SIF Image
        id: cache-deps
        uses: actions/cache@v4
        with:
          # Restore the single SIF file
          path: dependency_image.sif
          # Use the exact key generated by the first job
          key: ${{ needs.cache-dependencies.outputs.cache-key }}
          # Fail job if cache cannot be restored (indicates dependency build failed)
          fail-on-cache-miss: true

      - name: Check if Dependency SIF exists
        # This check ensures the cache restore actually brought back the file
        run: |
          if [ ! -f "./dependency_image.sif" ]; then
            echo "Error: Dependency SIF image not found after cache restore."
            exit 1
          fi
          echo "Dependency SIF image restored successfully."
          ls -lh ./dependency_image.sif # Show file info

      - name: Build OpenImpala using Dependency SIF
        run: |
          echo "Building OpenImpala using SIF image environment..."
          # Execute 'make' inside the SIF image environment
          # Mount the current checkout directory (containing the Makefile) into /src
          sudo apptainer exec --bind $PWD:/src \
            ./dependency_image.sif \
            bash -c 'cd /src && make clean && make -j$(nproc)' # bash should now be found inside SIF
          # Check make exit status
          if [ $? -ne 0 ]; then echo "Error: OpenImpala make failed."; exit 1; fi
          echo "OpenImpala built successfully."

      # Optional: Add steps here to run tests using the SIF image
      # - name: Run Tests
      #   run: |
      #     sudo apptainer exec --bind $PWD:/src \
      #       ./dependency_image.sif \
      #       bash -c 'cd /src/build/tests && ./tSomeTest'
