# Workflow name
name: Test OpenImpala Build (Singularity Cache)

# Triggers
on:
  push:
    branches: [ main, working, build ] # Trigger on relevant branches
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  # Job 1: Build dependencies and cache them in a sandbox
  cache-dependencies:
    runs-on: ubuntu-latest # Use a standard GitHub-hosted runner
    outputs:
      cache-key: ${{ steps.cache-key-step.outputs.key }} # Output the key used for the next job

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Apptainer/Singularity
        uses: eWaterCycle/setup-apptainer@v2
        with:
          apptainer-version: 1.2.5 # Use consistent version

      - name: Generate Cache Key
        id: cache-key-step
        # Key based on hash of the dependency recipe file + runner OS + date part
        run: |
          RECIPE_FILE="containers/Singularity.deps.def" # Path to the definition file
          CACHE_DATE=$(date +'%Y-%m') # Add month to key to allow periodic refresh
          # Corrected: Use string literal in hashFiles()
          echo "key=deps-cache-${{ runner.os }}-${CACHE_DATE}-$(echo -n ${{ hashFiles('containers/Singularity.deps.def') }} | md5sum | cut -d ' ' -f 1)" >> $GITHUB_OUTPUT

      - name: Cache Dependencies Sandbox (Restore Attempt)
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: ./dependency_sandbox # Directory to cache/restore
          key: ${{ steps.cache-key-step.outputs.key }}
          # Optional: allow restoring slightly older caches if exact key misses
          # restore-keys: |
          #   deps-cache-${{ runner.os }}-

      - name: Build Dependencies Sandbox (if cache miss)
        # This step runs only if the exact cache key was not found in the previous step
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          RECIPE_FILE="containers/Singularity.deps.def"
          # Basic check that the definition file exists
          if [ ! -f "$RECIPE_FILE" ]; then
             echo "Error: Recipe file $RECIPE_FILE not found!"
             exit 1
          fi
          echo "Building dependencies sandbox from $RECIPE_FILE..."

          # Build into a sandbox directory (folder) using sudo
          # Corrected: Use sudo instead of --fakeroot for privilege
          sudo apptainer build --sandbox ./dependency_sandbox "$RECIPE_FILE"

          # Corrected: Change ownership AFTER successful build to allow caching by runner user
          echo "Changing sandbox ownership for caching..."
          # Use $(id -u):$(id -g) to get current runner user/group ID
          sudo chown -R $(id -u):$(id -g) ./dependency_sandbox
          echo "Ownership change complete."

  # Job 2: Build OpenImpala using the cached dependencies
  build-openimpala:
    needs: cache-dependencies # Run after dependencies are cached/restored
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Apptainer/Singularity
        uses: eWaterCycle/setup-apptainer@v2
        with:
          apptainer-version: 1.2.5 # Use consistent version

      - name: Restore Dependencies Sandbox
        id: cache-deps-restore # Changed ID slightly to avoid potential reuse confusion
        uses: actions/cache@v4
        with:
          path: ./dependency_sandbox
          # Use the exact key generated and outputted by the first job
          key: ${{ needs.cache-dependencies.outputs.cache-key }}
          # No restore-keys needed here, we require the exact match built/cached previously

      - name: Check if sandbox exists after restore
        # This check verifies the cache restore worked OR the build in Job 1 succeeded
        run: |
          if [ ! -d "./dependency_sandbox" ]; then
            echo "Error: Dependency sandbox not found after restore step."
            echo "This likely means the build in the previous job failed or the cache could not be restored."
            exit 1
          fi
          echo "Dependency sandbox found successfully."

      - name: Build OpenImpala using Cached Dependencies
        run: |
          echo "Building OpenImpala inside sandbox environment..."
          # Execute 'make' inside the sandbox environment
          # Mount the current checkout directory (containing the Makefile) into /opt/openImpala
          # Assumes the sandbox contains necessary build tools and libraries (e.g., MPI, HDF5 in /usr/local or /opt)
          # Run make clean first, then parallel make
          apptainer exec --bind $PWD:/opt/openImpala \
            ./dependency_sandbox \
            bash -c 'cd /opt/openImpala && make clean && make -j$(nproc)'

          # Check make exit status explicitly
          if [ $? -ne 0 ]; then
            echo "Error: OpenImpala 'make' command failed."
            exit 1
          fi
          echo "OpenImpala built successfully."

      # Optional: Add steps here to run tests using the sandbox
      # - name: Run Tests
      #   run: |
      #     apptainer exec --bind $PWD:/opt/openImpala \
      #       ./dependency_sandbox \
      #       bash -c 'cd /opt/openImpala/build/tests && ./tSomeTest'
