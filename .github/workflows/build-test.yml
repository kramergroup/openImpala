# .github/workflows/build-test.yml
name: Build and Test OpenImpala Makefile with SIF Cache

on:
  push:
    # Trigger on pushes to these specific branches
    branches:
      - main
      - working
      - build
      - 'makefile' # Include makefile branch trigger
  pull_request:
    # Trigger on Pull Requests targeting main branch
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  # Renamed job to reflect caching
  build-openimpala:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Apptainer
        uses: eWaterCycle/setup-apptainer@v2
        with:
          apptainer-version: 1.2.5 # Use consistent version

      # <<< ADD CACHING STEP HERE >>>
      - name: Cache Dependency SIF Image
        id: cache-sif # Give the step an ID to check its output
        uses: actions/cache@v4
        with:
          # Path to the file to cache
          path: dependency_image.sif
          # Cache key: OS + hash of the definition file
          key: ${{ runner.os }}-apptainer-sif-${{ hashFiles('containers/Singularity.deps.def') }}
          # Fallback key if exact match not found
          restore-keys: |
            ${{ runner.os }}-apptainer-sif-

      # <<< MODIFY SIF BUILD STEP TO BE CONDITIONAL >>>
      - name: Build Dependency SIF Image Locally (if cache miss)
        # Only run this step if the cache step above did NOT find a match
        if: steps.cache-sif.outputs.cache-hit != 'true'
        run: |
          RECIPE_FILE="containers/Singularity.deps.def"
          TARGET_SIF="dependency_image.sif"
          if [ ! -f "$RECIPE_FILE" ]; then
            echo "Error: Dependency recipe file $RECIPE_FILE not found!"
            exit 1
          fi
          echo "Cache miss. Building dependencies SIF image '$TARGET_SIF' from $RECIPE_FILE..."
          # Build the SIF
          sudo apptainer build "$TARGET_SIF" "$RECIPE_FILE"
          # Check build exit status IMMEDIATELY
          BUILD_EXIT_CODE=$?
          if [ $BUILD_EXIT_CODE -ne 0 ]; then
              echo "Error: Apptainer SIF build failed with exit code $BUILD_EXIT_CODE."
              exit $BUILD_EXIT_CODE # Exit if build failed
          fi
          echo "Apptainer SIF build successful."
          ls -lh ./dependency_image.sif # Verify file exists and size
      - name: Verify SIF exists after cache/build step
        run: |
          if [ ! -f "./dependency_image.sif" ]; then
            echo "Error: dependency_image.sif not found after cache/build steps!"
            exit 1
          else
            echo "dependency_image.sif found."
            ls -lh ./dependency_image.sif
          fi

      # <<< OPENIMPALA BUILD STEP REMAINS LARGELY THE SAME >>>
      # This step runs whether the SIF was cached or built fresh
      - name: Build OpenImpala using Dependency SIF (with make debug)
        id: make_build # Give step an id
        continue-on-error: true # Allow step to fail so logs can be uploaded
        run: |
          # --- START ENHANCED DEBUG STEP ---
          echo "DEBUG: Printing environment inside container before make..."
          # Run debug commands using the SIF (might be cached or newly built)
          sudo apptainer exec --bind $PWD:/src ./dependency_image.sif bash -c ' \
            echo "--- USER & GROUP ---"; \
            id; \
            echo "--- SCRIPT SHELL ---"; \
            ps -p $$ -o comm=; \
            echo "--- SCL ACTIVE? (Look for _SCL_ variables) ---"; \
            env | grep SCL || echo "No SCL variables found"; \
            echo "--- FULL PATH ---"; \
            echo "$PATH"; \
            echo "--- which mpicc ---"; \
            which mpicc || echo "mpicc NOT FOUND"; \
            echo "--- which mpic++ ---"; \
            which mpic++ || echo "mpic++ NOT FOUND"; \
            echo "--- mpic++ --version ---"; \
            mpic++ --version || echo "mpic++ --version FAILED"; \
            echo "--- Contents of /usr/local/bin ---"; \
            ls -l /usr/local/bin || echo "ls /usr/local/bin FAILED"; \
            echo "--- Expected Lib Dirs ---"; \
            ls -ld /opt/amrex/23.11/lib /opt/hypre/v2.30.0/lib /opt/hdf5/1.12.3/lib /usr/local/lib || echo "ls lib dirs FAILED"; \
            echo "--- LD_LIBRARY_PATH ---"; \
            echo "$LD_LIBRARY_PATH"; \
            echo "--- Environment Variables ---"; \
            echo "DEBUG AMREX_HOME=[$AMREX_HOME]"; \
            echo "DEBUG HYPRE_HOME=[$HYPRE_HOME]"; \
            echo "DEBUG HDF5_HOME=[$HDF5_HOME]"; \
            echo "DEBUG H5CPP_HOME=[$H5CPP_HOME]"; \
            echo "DEBUG TIFF_HOME=[$TIFF_HOME]"; \
            echo "--- Check H5Cpp.h ---"; \
            find /opt/hdf5 /usr/include -name H5Cpp.h || echo "H5Cpp.h NOT FOUND in /opt/hdf5 or /usr/include"; \
            echo "--- Check amrex utils ---"; \
            find /opt/amrex -name AMReX_Utility.H || echo "AMReX_Utility.H NOT FOUND in /opt/amrex"; \
          '
          echo "DEBUG: Environment print finished."
          # --- END ENHANCED DEBUG STEP ---

          echo "Building OpenImpala using SIF image environment (with make clean)..."
          # Execute 'make clean' first - Explicitly source SCL
          sudo apptainer exec --bind $PWD:/src \
            ./dependency_image.sif \
            bash -c 'source /opt/rh/gcc-toolset-11/enable && cd /src && make clean'

          # Execute 'make -d' - Explicitly source SCL
          echo "Running make -d to capture debug output..."
          sudo apptainer exec --bind $PWD:/src \
            ./dependency_image.sif \
            bash -c 'source /opt/rh/gcc-toolset-11/enable && cd /src && make -d -j$(nproc)' > make_debug_output.log 2>&1

          # Capture the exit code of make -d
          MAKE_EXIT_CODE=$?
          echo "Make exit code: $MAKE_EXIT_CODE"
          # Explicitly fail the step if make failed
          if [ $MAKE_EXIT_CODE -ne 0 ]; then exit $MAKE_EXIT_CODE; fi
          echo "OpenImpala build command finished (check logs)."

      # <<< LOG UPLOAD AND FAILURE CHECK STEPS REMAIN THE SAME >>>
      - name: Upload Make Debug Log
        # Run this step always after the make attempt to capture log on success or failure
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: make-debug-log-${{ github.run_id }} # Unique artifact name per run
          path: make_debug_output.log # Path to the log file generated above
          retention-days: 5 # Keep logs for 5 days

      # Explicitly fail the overall job if the 'make_build' step failed
      - name: Fail job if make failed
        if: steps.make_build.outcome == 'failure'
        run: |
          echo "Make command failed. See uploaded 'make-debug-log' artifact for details."
          exit 1

      # Optional: Add steps here to run tests using the SIF image IF make succeeded
      # ...
