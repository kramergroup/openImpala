name: Build and Release Singularity Container

# Trigger the workflow on pushes to tags matching the pattern v*.*.* (e.g., v1.0.0, v1.2.3)
on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-release:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    permissions:
      contents: write # Allow action to write release assets

    steps:
      # 1. Checkout repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up Apptainer (successor to Singularity)
      # Uses a community action to install Apptainer on the runner
      - name: Set up Apptainer
        uses: eWaterCycle/setup-apptainer@v2
        with:
          # Specify the version of Apptainer you want to use for building
          # Check https://github.com/apptainer/apptainer/releases for latest versions
          apptainer-version: 1.2.5 # Or another recent, stable version

      # 3. Build the Singularity/Apptainer container (.sif file)
      - name: Build Apptainer container
        run: |
          # Get the tag name that triggered the workflow (e.g., "v1.0.0")
          TAG_NAME=${{ github.ref_name }}
          # Define the output filename for the SIF file
          SIF_FILENAME="openimpala-${TAG_NAME}.sif"
          # Define the path to the recipe file inside the containers/ directory
          RECIPE_FILE="containers/Singularity.def" # <-- Corrected filename

          # Verify the recipe file exists before attempting to build
          if [ ! -f "$RECIPE_FILE" ]; then
            echo "Error: Recipe file not found at $RECIPE_FILE"
            exit 1
          fi

          echo "Building $SIF_FILENAME from recipe $RECIPE_FILE..."

          # Build the container using the specified recipe path.
          # Using --fakeroot avoids needing full sudo.
          # If --fakeroot fails, you might need 'sudo apptainer build ...'
          apptainer build --fakeroot "$SIF_FILENAME" "$RECIPE_FILE"

          echo "Build complete: $SIF_FILENAME"

          # Make the SIF filename available to subsequent steps via environment variable
          echo "SIF_FILENAME=$SIF_FILENAME" >> $GITHUB_ENV

      # 4. Create GitHub Release and Upload SIF Asset
      # Uses the softprops/action-gh-release action which conveniently
      # creates a release based on the tag and uploads specified files.
      - name: Create GitHub Release and Upload SIF
        uses: softprops/action-gh-release@v2 # Use v2 or later
        with:
          # The files glob pattern to upload as release assets.
          # Uses the SIF_FILENAME environment variable set in the previous step.
          files: ${{ env.SIF_FILENAME }}
        env:
          # GITHUB_TOKEN is automatically provided by GitHub Actions.
          # It has the necessary permissions to create releases and upload assets
          # because we set `permissions: contents: write` for the job.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
