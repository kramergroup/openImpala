name: Build and Release Singularity Container

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Apptainer
        uses: eWaterCycle/setup-apptainer@v2
        with:
          apptainer-version: 1.2.5

      - name: Restore Dependency SIF Cache
        id: cache-restore-sif
        uses: actions/cache/restore@v4
        with:
          path: dependency_image.sif
          key: ${{ runner.os }}-apptainer-sif-${{ hashFiles('containers/Singularity.deps.def') }}

      - name: Build Dependency SIF (if cache miss)
        if: steps.cache-restore-sif.outputs.cache-hit != 'true'
        run: |
          echo "Cache miss. Building dependency_image.sif..."
          sudo apptainer build --force dependency_image.sif containers/Singularity.deps.def

      - name: Save Dependency SIF to Cache
        if: steps.cache-restore-sif.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: dependency_image.sif
          key: ${{ steps.cache-restore-sif.outputs.cache-primary-key || format('{0}-apptainer-sif-{1}', runner.os, hashFiles('containers/Singularity.deps.def')) }}

      - name: Compile Application Binaries
        run: |
          echo "Compiling application executables inside the dependency container..."
          sudo apptainer exec \
            --bind $PWD:/src \
            ./dependency_image.sif \
            bash -c 'source /opt/rh/gcc-toolset-11/enable && cd /src && make all -j$(nproc)'
          echo "Compilation complete."
      
      - name: Build Final Release SIF
        run: |
          echo "Building the final, clean application container for release..."
          SIF_FILENAME="openimpala-${{ github.ref_name }}.sif"
          STAGING_DIR=$(mktemp -d)
          echo "Using staging directory: $STAGING_DIR"

          echo "Copying compiled application binaries to staging area..."
          cp -r ./build/apps "$STAGING_DIR/"

          echo "Extracting runtime libraries..."
          sudo apptainer exec \
            --bind "$STAGING_DIR:/staging" \
            ./dependency_image.sif \
            bash -c 'tar chf - /opt /usr/local | (cd /staging && tar xf -)'
            
          echo "Creating final Singularity definition file..."
          cat > Singularity.final.def <<-EOF
          Bootstrap: docker
          From: quay.io/rockylinux/rockylinux:8

          %files
              "$STAGING_DIR/apps" /usr/bin/
              "$STAGING_DIR/opt" /
              "$STAGING_DIR/usr/local" /usr/

          %post
              # Install only the essential runtime packages from the SCL.
              dnf install -y gcc-toolset-11-runtime && dnf clean all -y
              # Update the system linker cache for libraries in standard paths.
              ldconfig

          %environment
              # This is the definitive, robust environment setup.
              # It explicitly defines the complete PATH and LD_LIBRARY_PATH from scratch,
              # making the container self-sufficient and independent of the host environment.
              export LC_ALL=C
              
              SCL_PATHS_LIB="/opt/rh/gcc-toolset-11/root/usr/lib64:/opt/rh/gcc-toolset-11/root/usr/lib"
              CUSTOM_LIBS="/usr/local/lib:/opt/amrex/25.03/lib:/opt/hypre/v2.32.0/lib:/opt/hdf5/1.12.3/lib:/opt/libtiff/4.6.0/lib"
              
              export PATH="/opt/rh/gcc-toolset-11/root/usr/bin:/usr/local/bin:/usr/bin:/bin"
              export LD_LIBRARY_PATH="\${SCL_PATHS_LIB}:\${CUSTOM_LIBS}"
          EOF

          echo "Building final SIF..."
          sudo apptainer build "$SIF_FILENAME" Singularity.final.def
          echo "SIF_FILENAME=$SIF_FILENAME" >> $GITHUB_ENV

      - name: Create GitHub Release and Upload SIF
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.SIF_FILENAME }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

