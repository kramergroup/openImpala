name: Build and Release Singularity Container

# Trigger the workflow on pushes to the 'build' branch for testing,
# or manually via workflow_dispatch.
on:
  push:
    branches:
      - 'master'  # <-- Trigger ONLY on pushes to the 'build' branch
    tags:
      - 'v*'
  workflow_dispatch: # Allows manual trigger via Actions tab

jobs:
  build-and-release:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    permissions:
      contents: write # Still needed for release step later, harmless here

    steps:
      # 1. Checkout repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up Apptainer (successor to Singularity)
      # Uses a community action to install Apptainer on the runner
      - name: Set up Apptainer
        uses: eWaterCycle/setup-apptainer@v2
        with:
          # Specify the version of Apptainer you want to use for building
          # Check https://github.com/apptainer/apptainer/releases for latest versions
          apptainer-version: 1.2.5 # Or another recent, stable version

      # 3. Build the Singularity/Apptainer container (.sif file)
      - name: Build Apptainer container
        run: |
          # Get a reference name (branch name or tag name)
          REF_NAME=${{ github.ref_name }}
          # Create a SIF filename based on branch/tag for testing uniqueness
          SIF_FILENAME="openimpala-${REF_NAME//\//_}-testbuild.sif" # Sanitize ref name slightly
          # Define the path to the recipe file inside the containers/ directory
          RECIPE_FILE="containers/Singularity.def"

          # Verify the recipe file exists before attempting to build
          if [ ! -f "$RECIPE_FILE" ]; then
            echo "Error: Recipe file not found at $RECIPE_FILE"
            exit 1
          fi

          echo "Building $SIF_FILENAME from recipe $RECIPE_FILE..."

          # Build the container using 'sudo' to grant necessary privileges
          sudo apptainer build "$SIF_FILENAME" "$RECIPE_FILE" # <-- Changed --fakeroot to sudo

          echo "Build complete: $SIF_FILENAME"

          # Make the SIF filename available to subsequent steps via environment variable
          echo "SIF_FILENAME=$SIF_FILENAME" >> $GITHUB_ENV

      # 4. Create GitHub Release and Upload SIF Asset (DISABLED FOR TESTING)
      # Uses the softprops/action-gh-release action which conveniently
      # creates a release based on the tag and uploads specified files.
      - name: Create GitHub Release and Upload SIF
        if: true # <-- Temporarily disable this step during testing on 'build' branch
        uses: softprops/action-gh-release@v2 # Use v2 or later
        with:
          # The files glob pattern to upload as release assets.
          # Uses the SIF_FILENAME environment variable set in the previous step.
          files: ${{ env.SIF_FILENAME }}
        env:
          # GITHUB_TOKEN is automatically provided by GitHub Actions.
          # It has the necessary permissions to create releases and upload assets
          # because we set `permissions: contents: write` for the job.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Optional: Add a step here to verify build success if needed,
      # e.g., check if the SIF file exists and has non-zero size.
      - name: Verify Build Output
        run: |
          echo "Checking existence and size of ${{ env.SIF_FILENAME }}"
          ls -lh "${{ env.SIF_FILENAME }}"
          if [ ! -s "${{ env.SIF_FILENAME }}" ]; then
             echo "Error: Built SIF file ${{ env.SIF_FILENAME }} is missing or empty."
             exit 1
          fi
          echo "Build verification step passed."
