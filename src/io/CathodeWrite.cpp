#include "CathodeWrite.H" // Includes CathodeParams struct definition

#include <AMReX_REAL.H>
#include <AMReX_Print.H> // For error/warning messages

#include <fstream>   // For std::ofstream
#include <string>    // For std::string
#include <iomanip>   // For std::setprecision, std::scientific, std::fixed
#include <cmath>     // For std::abs
#include <limits>    // For std::numeric_limits

namespace OpenImpala {

// Constructor: Initializes members from the CathodeParams struct
CathodeWrite::CathodeWrite(const CathodeParams& params) :
    // Initialize members by copying from the params struct
    m_vf_solid(params.volume_fraction_solid),
    m_particle_radius(params.particle_radius),
    m_conductivity(params.active_material_conductivity),
    m_max_concentration(params.max_concentration)
    // Add initializers for ALL other necessary member variables here
    // e.g., m_some_other_param(params.some_other_param)
{
    // Optional: Add validation for parameters if needed
    if (m_vf_solid < 0.0 || m_vf_solid > 1.0) {
        amrex::Warning("CathodeWrite: Input solid volume fraction is outside [0, 1].");
    }
    if (m_particle_radius <= 0.0) {
        amrex::Warning("CathodeWrite: Input particle radius is non-positive.");
    }
    // Add other checks as necessary
}

// Write DandeLiion parameter file
bool CathodeWrite::writeDandeLiionParameters(const std::string& filename) const
{
    std::ofstream myfile;
    myfile.open(filename);

    // Check if file opened successfully
    if (!myfile.is_open()) {
        amrex::Print() << "Error: Could not open file " << filename << " for writing.\n";
        return false;
    }

    // --- Calculate Derived Parameters ---
    // Porosity (electrolyte volume fraction 'el')
    const amrex::Real porosity = 1.0 - m_vf_solid;

    // BET surface area ('bet') = 3 * solid_fraction / R
    // Verify this formula against DandeLiion's expectation.
    amrex::Real bet_surface_area = 0.0;
    if (m_particle_radius > std::numeric_limits<amrex::Real>::epsilon()) { // Avoid division by zero
        bet_surface_area = 3.0 * m_vf_solid / m_particle_radius;
    } else {
        amrex::Warning("DandeLiionWrite: Particle radius is near zero, cannot calculate BET area.");
    }

    // Permeability factor ('B') = porosity / 1.94 (?)
    // Verify this formula. Is 1.94 always correct?
    const amrex::Real permeability_factor_B = porosity / 1.94;

    // Set output formatting (example: scientific notation, 8 digits precision)
    myfile << std::scientific << std::setprecision(8);

    // --- Write File Content ---
    myfile << "###########################################################\n";
    myfile << "# Cathode parameter container (Generated by CathodeWrite) #\n";
    myfile << "# Units should correspond to DandeLiion expectations.     #\n";
    myfile << "###########################################################\n";
    myfile << "\n";
    // Mesh nodes - these seem like simulation settings, not material params? Keep default or make configurable?
    myfile << "N = 55                # Number of mesh nodes in liquid (Example value)\n";
    myfile << "M = 50                # Number of mesh nodes in solid (Example value)\n";
    myfile << "\n";
    // Use member variables instead of hardcoded values - ADD ALL RELEVANT PARAMS
    // myfile << "L = 54.0e-6           # Electrode thickness, m (Get from params?)\n"; // Example if thickness is needed
    myfile << "R = " << m_particle_radius << "          # Particle radius, m\n";
    myfile << "\n";
    // myfile << "act     = 0.58            # Active part of the electrode (Get from params?)\n"; // Example
    // myfile << "A       = 8.585e-3        # Electrode cross-sectional area, m^2 (Get from params?)\n"; // Example
    myfile << "el      = " << porosity << "        # Volume fraction of electrolyte, Calculated (1 - vf_solid)\n";
    myfile << "bet     = " << bet_surface_area << "  # BET surface area, m^-1 (Verify formula: 3*vf_solid/R ?)\n";
    myfile << "B       = " << permeability_factor_B << "   # Permeability factor of electrolyte (Verify formula: el/1.94 ?)\n";
    myfile << "cmax    = " << m_max_concentration << "   # Maximum concentration of Li ions in solid, mol m^-3\n";
    myfile << "sigma_s = " << m_conductivity << "    # Solid conductivity, S m^-1\n";
    // ... ADD ALL OTHER REQUIRED PARAMETERS FROM MEMBER VARIABLES ...
    myfile << "###########################################################\n";

    // Check for write errors before returning
    if (!myfile.good()) {
         amrex::Print() << "Error: An error occurred during file write operation for " << filename << "\n";
         myfile.close(); // Attempt to close
         return false;
    }

    myfile.close(); // Optional explicit close
    amrex::Print() << "DandeLiion parameters written to: " << filename << std::endl;
    return true; // Indicate success
}

// Write PyBamm parameter file
bool CathodeWrite::writePyBammParameters(const std::string& filename) const
{
    std::ofstream myfile;
    myfile.open(filename);

    // Check if file opened successfully
    if (!myfile.is_open()) {
        amrex::Print() << "Error: Could not open file " << filename << " for writing.\n";
        return false;
    }

    // --- Calculate Derived Parameters ---
    // Porosity (electrolyte volume fraction)
    const amrex::Real porosity = 1.0 - m_vf_solid;

    // Surface area density = 3 * solid_fraction / R
    // Verify this formula against PyBamm's expectation.
    amrex::Real surface_area_density = 0.0;
    if (m_particle_radius > std::numeric_limits<amrex::Real>::epsilon()) { // Avoid division by zero
        surface_area_density = 3.0 * m_vf_solid / m_particle_radius;
    } else {
        amrex::Warning("PyBammWrite: Particle radius is near zero, cannot calculate surface area density.");
    }

    // Set output formatting (PyBamm CSV might prefer fixed point for some values)
    // You might need to switch formatting for different lines/values.
    // Example: Use default (likely fixed point with reasonable precision) initially
    myfile << std::fixed << std::setprecision(8); // Adjust precision as needed

    // --- Write File Content ---
    myfile << "Name [units],Value,Reference,Notes\n";
    myfile << "# Parameter file generated by CathodeWrite,,,\n";
    myfile << "# Units should correspond to PyBamm expectations,,,\n";
    myfile << ",,,\n";
    myfile << "# Electrode properties,,,\n";
    // Use member variables instead of hardcoded values - ADD ALL RELEVANT PARAMS
    myfile << "Positive electrode conductivity [S.m-1]," << m_conductivity << ",OpenImpala Calculated Parameter,\n"; // Example
    myfile << "Maximum concentration in positive electrode [mol.m-3]," << m_max_concentration << ",OpenImpala Calculated Parameter,\n"; // Example
    myfile << "Positive electrode diffusivity [m2.s-1],[function]lico2_diffusivity_Dualfoil1998,,Requires Function Definition in PyBamm\n"; // Example: Keep function defs if applicable
    myfile << "Positive electrode OCP [V],[function]lico2_ocp_Dualfoil1998,,\n";
    myfile << ",,,\n";
    myfile << "# Microstructure,,,\n";
    myfile << "Positive electrode porosity," << porosity << ",OpenImpala Calculated Parameter,electrolyte volume fraction (1 - vf_solid)\n";
    myfile << "Positive electrode active material volume fraction," << m_vf_solid << ",OpenImpala Calculated Parameter,\n"; // Assuming vf_solid was input
    myfile << "Positive particle radius [m]," << m_particle_radius << ",OpenImpala Calculated Parameter,\n";
    myfile << "Positive electrode surface area density [m-1]," << surface_area_density << ",OpenImpala Calculated Parameter,Calculated as 3*vf_solid/R (Verify formula)\n";
    // Assume Bruggeman coeffs are members initialized from CathodeParams, e.g., m_brugg_elec, m_brugg_solid
    // myfile << "Positive electrode Bruggeman coefficient (electrolyte)," << m_brugg_elec << ",OpenImpala Calculated Parameter,\n";
    // myfile << "Positive electrode Bruggeman coefficient (electrode)," << m_brugg_solid << ",OpenImpala Calculated Parameter,\n";
    myfile << ",,,\n";
    myfile << "# Interfacial reactions,,,\n";
    myfile << "Positive electrode cation signed stoichiometry,-1,,\n"; // Usually fixed
    myfile << "Positive electrode electrons in reaction,1,,\n"; // Usually fixed
    // myfile << "Positive electrode reference exchange-current density [A.m-2(m3.mol)1.5]," << m_exchange_current << ",OpenImpala Calculated Parameter,...\n"; // Example
    // ... Add ALL OTHER required parameters using member variables ...
    myfile << ",,,\n";
    // ... Other sections (Density, Thermal, Activation Energies) using member variables ...
    myfile << ",,,\n";


    // Check for write errors before returning
    if (!myfile.good()) {
         amrex::Print() << "Error: An error occurred during file write operation for " << filename << "\n";
         myfile.close(); // Attempt to close
         return false;
    }

    myfile.close(); // Optional explicit close
    amrex::Print() << "PyBamm parameters written to: " << filename << std::endl;
    return true; // Indicate success
}

} // namespace OpenImpala
